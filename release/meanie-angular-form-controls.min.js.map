{"version":3,"sources":["meanie-angular-form-controls.min.js","form-controls.js","check-box/check-box.js","check-boxes/check-boxes.js","radio-buttons/radio-buttons.js","select-box/select-box.js","type-ahead/type-ahead.js"],"names":["window","angular","undefined","module","factory","hasChanged","changes","previousValue","currentValue","equals","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$isEmpty","$onChanges","$validate","$setDirty","toggle","value","isChecked","options","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","find","modelValue","asObject","classes","className","$$setOptions","allowInvalid","$options","createChild","getLabel","map","item","checked","i","findIndex","splice","push","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","hasSpinner","$scope","$document","debounce","func","delay","timeout","wrapper","clearTimeout","setTimeout","isTextInput","event","keyCode","documentClickHandler","$input","contains","target","isShowingOptions","$apply","hideOptions","bind","preventDefault","stopPropagation","ensureSelectionInView","selectionIndex","$container","children","cTop","scrollTop","cBottom","clientHeight","eTop","offsetTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","phrase","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","clearPhrase","parent","next","on","$onDestroy","off","indexOf","keydown","showOptions","confirmSelection","char","String","fromCharCode","selectByInput","getSelectedLabel","toggleOptions","hasOptions","toLowerCase","regex","RegExp","label","match","o","leaveOpen","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","$timeout","isControlInput","keys","TAB","isShowingResults","hideResults","searchOptions","resolve","items","filter","test","currentSearch","lastProcessedSearch","pendingSearch","attr","focus","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"meanie-angular-form-controls.min.js","sourcesContent":["/**\n * meanie-angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"check-box\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle()\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('check-box-wrapper');\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function () {\n\n        //Don't toggle when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"check-box-group {{$ctrl.classes}}\">\\n      <label class=\"check-box\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get option value\n        var optionValue = getTrackingValue(option, index);\n\n        //See if present in model values\n        var find = model.find(function (model) {\n          var modelValue = getTrackingValue(model, model);\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          //NOTE: first approach for Angular < 1.6.0\n          if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n            $ctrl.ngModel.$$setOptions({\n              allowInvalid: true\n            });\n          } else {\n            $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n              allowInvalid: true\n            });\n          }\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var optionValue = getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.findIndex(function (model) {\n            var modelValue = getTrackingValue(model, model);\n            return modelValue === optionValue;\n          });\n          value.splice(i, 1);\n        } else {\n          value.push(asObject ? option : optionValue);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"radio-button-group {{$ctrl.classes}}\">\\n      <label class=\"radio-button\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"radio-button\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n        var optionValue = getTrackingValue(option, index);\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"select-box {{$ctrl.classes}}\">\\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <span class=\"form-control-spinner\" ng-class=\"{\\'show-spinner\\': $ctrl.hasSpinner}\">\\n          <span class=\"caret\"\\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\\n            ng-if=\"!$ctrl.hasSpinner\"\\n          ></span>\\n          <input readonly class=\"form-control\" type=\"text\"\\n            ng-value=\"$ctrl.getSelectedLabel()\"\\n            ng-keydown=\"$ctrl.keydown($event)\"\\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\\n        </span>\\n      </div>\\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1)\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', function controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var phrase = '';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Debounce helper\n       */\n      function debounce(func, delay) {\n\n        //Timeout placeholder\n        var timeout = void 0;\n\n        //Create wrapper function\n        var wrapper = function wrapper() {\n\n          //Clear any existing timeout\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          //Create new timeout\n          timeout = setTimeout(function () {\n            return func();\n          }, delay);\n        };\n\n        //Return wrapper function\n        return wrapper;\n      }\n\n      /**\n       * Function to clear the phrase (debounced after 1.5 seconds)\n       */\n      var clearPhrase = debounce(function () {\n        phrase = '';\n      }, 1000);\n\n      /**\n       * Check if input was text\n       */\n      function isTextInput(event) {\n        if (event.keyCode >= 48 && event.keyCode <= 57) {\n          return true;\n        }\n        if (event.keyCode >= 65 && event.keyCode <= 90) {\n          return true;\n        }\n        if (event.keyCode === 32) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Find options\n        var $options = $container.children();\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().parent().next();\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Move selection up or down\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionUp();\n          } else {\n            this.showOptions();\n          }\n        } else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionDown();\n          } else {\n            this.showOptions();\n          }\n        }\n\n        //Confirm selection\n        else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n\n          //Hide options\n          else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n              event.preventDefault();\n              this.hideOptions();\n            }\n\n            //Show options\n            else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n                event.preventDefault();\n                this.showOptions();\n              }\n\n              //Text input\n              else if (isTextInput(event)) {\n                  var char = String.fromCharCode(event.keyCode);\n                  this.selectByInput(char);\n                }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select by input character(s)\n       */\n      this.selectByInput = function (char) {\n\n        //Lowercase all the things\n        char = char.toLowerCase();\n\n        //Add to phrase\n        phrase += char;\n\n        //Create regex\n        var regex = new RegExp('^' + phrase, 'i');\n\n        //Find matching option\n        var option = this.options.find(function (option) {\n          var label = getLabelValue(option);\n          return label.match(regex);\n        });\n\n        //Match found?\n        if (option) {\n          var index = this.options.findIndex(function (o) {\n            return o === option;\n          });\n          this.select(option, index, true);\n        }\n\n        //Clear phrase (debounced)\n        clearPhrase();\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index, leaveOpen) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        if (!leaveOpen) {\n          this.hideOptions();\n        } else {\n          ensureSelectionInView();\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"type-ahead\">\\n      <span class=\"form-control-spinner\"\\n        ng-class=\"{\\'show-spinner\\': $ctrl.isSearching}\">\\n        <input class=\"form-control\" type=\"text\"\\n          placeholder=\"{{$ctrl.placeholder}}\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-keyup=\"$ctrl.keyup($event)\"\\n          ng-disabled=\"$ctrl.isDisabled\"\\n          ng-model=\"$ctrl.searchQuery\">\\n        <spinner></spinner>\\n      </span>\\n      <ul class=\"type-ahead-results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"check-box\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle()\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('check-box-wrapper');\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function() {\n\n      //Don't toggle when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"check-box-group {{$ctrl.classes}}\">\n      <label class=\"check-box\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get option value\n      let optionValue = getTrackingValue(option, index);\n\n      //See if present in model values\n      let find = model.find(model => {\n        let modelValue = getTrackingValue(model, model);\n        return (modelValue === optionValue);\n      });\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        //NOTE: first approach for Angular < 1.6.0\n        if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true,\n          });\n        }\n        else {\n          $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n            allowInvalid: true,\n          });\n        }\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let optionValue = getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.findIndex(model => {\n          let modelValue = getTrackingValue(model, model);\n          return (modelValue === optionValue);\n        });\n        value.splice(i, 1);\n      }\n      else {\n        value.push(asObject ? option : optionValue);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"radio-button-group {{$ctrl.classes}}\">\n      <label class=\"radio-button\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"radio-button\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n      let optionValue = getTrackingValue(option, index);\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"select-box {{$ctrl.classes}}\">\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <span class=\"form-control-spinner\" ng-class=\"{'show-spinner': $ctrl.hasSpinner}\">\n          <span class=\"caret\"\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\n            ng-if=\"!$ctrl.hasSpinner\"\n          ></span>\n          <input readonly class=\"form-control\" type=\"text\"\n            ng-value=\"$ctrl.getSelectedLabel()\"\n            ng-keydown=\"$ctrl.keydown($event)\"\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\n        </span>\n      </div>\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1)\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n    //Helper vars\n    const $ctrl = this;\n    let selectionIndex, $input, $container;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let phrase = '';\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Debounce helper\n     */\n    function debounce(func, delay) {\n\n      //Timeout placeholder\n      let timeout;\n\n      //Create wrapper function\n      const wrapper = function() {\n\n        //Clear any existing timeout\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        //Create new timeout\n        timeout = setTimeout(() => func(), delay);\n      };\n\n      //Return wrapper function\n      return wrapper;\n    }\n\n    /**\n     * Function to clear the phrase (debounced after 1.5 seconds)\n     */\n    const clearPhrase = debounce(() => {\n      phrase = '';\n    }, 1000);\n\n    /**\n     * Check if input was text\n     */\n    function isTextInput(event) {\n      if (event.keyCode >= 48 && event.keyCode <= 57) {\n        return true;\n      }\n      if (event.keyCode >= 65 && event.keyCode <= 90) {\n        return true;\n      }\n      if (event.keyCode === 32) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Find options\n      const $options = $container.children();\n\n      //Get option now, taking into account the additional nullable element\n      const option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      const cTop = $container[0].scrollTop;\n      const cBottom = cTop + $container[0].clientHeight;\n      const eTop = option.offsetTop;\n      const eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().parent().next();\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Move selection up or down\n      if (event.keyCode === KeyCodes.UP) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionUp();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n      else if (event.keyCode === KeyCodes.DOWN) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionDown();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n\n      //Confirm selection\n      else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n        event.preventDefault();\n        this.confirmSelection();\n      }\n\n      //Hide options\n      else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n        event.preventDefault();\n        this.hideOptions();\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n        event.preventDefault();\n        this.showOptions();\n      }\n\n      //Text input\n      else if (isTextInput(event)) {\n        const char = String.fromCharCode(event.keyCode);\n        this.selectByInput(char);\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select by input character(s)\n     */\n    this.selectByInput = function(char) {\n\n      //Lowercase all the things\n      char = char.toLowerCase();\n\n      //Add to phrase\n      phrase += char;\n\n      //Create regex\n      const regex = new RegExp('^' + phrase, 'i');\n\n      //Find matching option\n      const option = this.options.find(option => {\n        const label = getLabelValue(option);\n        return label.match(regex);\n      });\n\n      //Match found?\n      if (option) {\n        const index = this.options.findIndex(o => o === option);\n        this.select(option, index, true);\n      }\n\n      //Clear phrase (debounced)\n      clearPhrase();\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index, leaveOpen) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      if (!leaveOpen) {\n        this.hideOptions();\n      }\n      else {\n        ensureSelectionInView();\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"type-ahead\">\n      <span class=\"form-control-spinner\"\n        ng-class=\"{'show-spinner': $ctrl.isSearching}\">\n        <input class=\"form-control\" type=\"text\"\n          placeholder=\"{{$ctrl.placeholder}}\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-keyup=\"$ctrl.keyup($event)\"\n          ng-disabled=\"$ctrl.isDisabled\"\n          ng-model=\"$ctrl.searchQuery\">\n        <spinner></spinner>\n      </span>\n      <ul class=\"type-ahead-results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}