{"version":3,"sources":["meanie-angular-form-controls.min.js","check-box.js","check-boxes.js","form-controls.js","radio-buttons.js","select-box.js","type-ahead.js"],"names":["window","angular","undefined","module","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$isEmpty","$onChanges","changes","$validate","hasChanged","$setDirty","toggle","event","defaultPrevented","value","isChecked","options","min","max","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","find","modelValue","asObject","classes","className","$validators","$error","required","$$setOptions","allowInvalid","$options","createChild","getLabel","map","item","checked","i","findIndex","splice","push","factory","previousValue","currentValue","equals","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","hasSpinner","$scope","$document","$timeout","$window","debounce","func","delay","timeout","wrapper","clearTimeout","setTimeout","isTextInput","keyCode","documentClickHandler","console","log","isShowingOptions","contains","target","$apply","hideOptions","bind","preventDefault","stopPropagation","findScrollableParent","$child","$parent","parent","style","getComputedStyle","tagName","overflowY","findOffset","node","relativeNode","offset","offsetTop","offsetParent","ensureDropdownInView","$container","height","clientHeight","scroll","scrollTop","bottom","diff","ensureSelectionInView","selectionIndex","children","cTop","cBottom","eTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","$input","phrase","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","clearPhrase","next","on","$onDestroy","off","indexOf","keydown","showOptions","confirmSelection","char","String","fromCharCode","selectByInput","getSelectedLabel","toggleOptions","hasOptions","toLowerCase","regex","RegExp","label","match","o","leaveOpen","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","isControlInput","keys","TAB","isShowingResults","hideResults","searchOptions","resolve","items","filter","test","currentSearch","lastProcessedSearch","pendingSearch","attr","focus","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"meanie-angular-form-controls.min.js","sourcesContent":["/**\n * meanie-angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"CheckBox\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle($event)\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('CheckBox-Wrapper');\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function (event) {\n\n        //Don't toggle when disabled or event default prevented\n        if (this.isDisabled || event.defaultPrevented) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"CheckBox-Group {{$ctrl.classes}}\">\\n      <label class=\"CheckBox\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      min: '<',\n      max: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get option value\n        var optionValue = getTrackingValue(option, index);\n\n        //See if present in model values\n        var find = model.find(function (model) {\n          var modelValue = getTrackingValue(model, model);\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Validation for min/max values\n        this.ngModel.$validators.min = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.min || $ctrl.min < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length >= $ctrl.min;\n        };\n        this.ngModel.$validators.max = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.max || $ctrl.max < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length <= $ctrl.max;\n        };\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          //NOTE: first approach for Angular < 1.6.0\n          if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n            $ctrl.ngModel.$$setOptions({\n              allowInvalid: true\n            });\n          } else {\n            $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n              allowInvalid: true\n            });\n          }\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var optionValue = getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.findIndex(function (model) {\n            var modelValue = getTrackingValue(model, model);\n            return modelValue === optionValue;\n          });\n          value.splice(i, 1);\n        } else {\n          value.push(asObject ? option : optionValue);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"RadioButton-Group {{$ctrl.classes}}\">\\n      <label class=\"RadioButton\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"RadioButton\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n        var optionValue = getTrackingValue(option, index);\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"SelectBox {{$ctrl.classes}}\">\\n      <div class=\"Input-Wrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <div class=\"Input-Spinner\" ng-class=\"{\\'Input-Spinner--Visible\\': $ctrl.hasSpinner}\">\\n          <div class=\"Caret\"\\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\\n            ng-click=\"$event.stopPropagation()\"\\n            ng-if=\"!$ctrl.hasSpinner\"\\n          ></div>\\n          <input readonly class=\"Input\" type=\"text\"\\n            ng-value=\"$ctrl.getSelectedLabel()\"\\n            ng-keydown=\"$ctrl.keydown($event)\"\\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\\n        </div>\\n      </div>\\n      <ul class=\"SelectBox-Options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', '$timeout', '$window', function controller($element, $attrs, $log, $formControls, $scope, $document, $timeout, $window) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var phrase = '';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Debounce helper\n       */\n      function debounce(func, delay) {\n\n        //Timeout placeholder\n        var timeout = void 0;\n\n        //Create wrapper function\n        var wrapper = function wrapper() {\n\n          //Clear any existing timeout\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          //Create new timeout\n          timeout = setTimeout(function () {\n            return func();\n          }, delay);\n        };\n\n        //Return wrapper function\n        return wrapper;\n      }\n\n      /**\n       * Function to clear the phrase (debounced after 1.5 seconds)\n       */\n      var clearPhrase = debounce(function () {\n        phrase = '';\n      }, 1000);\n\n      /**\n       * Check if input was text\n       */\n      function isTextInput(event) {\n        if (event.keyCode >= 48 && event.keyCode <= 57) {\n          return true;\n        }\n        if (event.keyCode >= 65 && event.keyCode <= 90) {\n          return true;\n        }\n        if (event.keyCode === 32) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        console.log('document click handler');\n        if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n          console.log('hiding!');\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Find scrollable parent\n       */\n      function findScrollableParent($child) {\n\n        //Get parent\n        var $parent = $child.parent();\n        if ($parent.length === 0) {\n          return null;\n        }\n\n        //Get style\n        var style = $window.getComputedStyle($parent[0]);\n\n        //Find element that has auto overflow or which is the body\n        if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n          return $parent;\n        }\n\n        //Find next\n        return findScrollableParent($parent);\n      }\n\n      /**\n       * Find offset relative to a certain node\n       */\n      function findOffset(node, relativeNode) {\n        var offset = node.offsetTop;\n        while (node.offsetParent && node.offsetParent !== relativeNode) {\n          node = node.offsetParent;\n          offset += node.offsetTop;\n        }\n        return offset;\n      }\n\n      /**\n       * Ensure the whole dropdown is in view\n       */\n      function ensureDropdownInView() {\n\n        //Find scrollable parent\n        var $parent = findScrollableParent($element);\n        if (!$parent) {\n          return;\n        }\n\n        //Get params\n        var offset = findOffset($container[0], $parent[0]);\n        var height = $parent[0].clientHeight;\n        var scroll = $parent[0].scrollTop;\n        var bottom = offset - scroll + $container[0].clientHeight;\n\n        //Check if it's outside of the height\n        if (bottom > height) {\n          var diff = bottom - height + 16;\n          $parent[0].scrollTop += diff;\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Find options\n        var $options = $container.children();\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().parent().next();\n\n        //Apply global click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Move selection up or down\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionUp();\n          } else {\n            this.showOptions();\n          }\n        } else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionDown();\n          } else {\n            this.showOptions();\n          }\n        }\n\n        //Confirm selection\n        else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n\n          //Hide options\n          else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n              event.preventDefault();\n              this.hideOptions();\n            }\n\n            //Show options\n            else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n                event.preventDefault();\n                this.showOptions();\n              }\n\n              //Text input\n              else if (isTextInput(event)) {\n                  var char = String.fromCharCode(event.keyCode);\n                  this.selectByInput(char);\n                }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n          $timeout(function () {\n            ensureDropdownInView();\n          });\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        console.log('TOGGLE!');\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select by input character(s)\n       */\n      this.selectByInput = function (char) {\n\n        //Lowercase all the things\n        char = char.toLowerCase();\n\n        //Add to phrase\n        phrase += char;\n\n        //Create regex\n        var regex = new RegExp('^' + phrase, 'i');\n\n        //Find matching option\n        var option = this.options.find(function (option) {\n          var label = getLabelValue(option);\n          return label.match(regex);\n        });\n\n        //Match found?\n        if (option) {\n          var index = this.options.findIndex(function (o) {\n            return o === option;\n          });\n          this.select(option, index, true);\n        }\n\n        //Clear phrase (debounced)\n        clearPhrase();\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index, leaveOpen) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        if (!leaveOpen) {\n          this.hideOptions();\n        } else {\n          ensureSelectionInView();\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"TypeAhead\">\\n      <span class=\"Input-Spinner\"\\n        ng-class=\"{\\'Input-Spinner--Visible\\': $ctrl.isSearching}\">\\n        <input class=\"Input\" type=\"text\"\\n          placeholder=\"{{$ctrl.placeholder}}\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-keyup=\"$ctrl.keyup($event)\"\\n          ng-disabled=\"$ctrl.isDisabled\"\\n          ng-model=\"$ctrl.searchQuery\">\\n        <spinner></spinner>\\n      </span>\\n      <ul class=\"TypeAhead-Results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"CheckBox\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle($event)\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('CheckBox-Wrapper');\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function(event) {\n\n      //Don't toggle when disabled or event default prevented\n      if (this.isDisabled || event.defaultPrevented) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"CheckBox-Group {{$ctrl.classes}}\">\n      <label class=\"CheckBox\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    min: '<',\n    max: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get option value\n      let optionValue = getTrackingValue(option, index);\n\n      //See if present in model values\n      let find = model.find(model => {\n        let modelValue = getTrackingValue(model, model);\n        return (modelValue === optionValue);\n      });\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Validation for min/max values\n      this.ngModel.$validators.min = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.min || $ctrl.min < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length >= $ctrl.min);\n      };\n      this.ngModel.$validators.max = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.max || $ctrl.max < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length <= $ctrl.max);\n      };\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        //NOTE: first approach for Angular < 1.6.0\n        if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true,\n          });\n        }\n        else {\n          $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n            allowInvalid: true,\n          });\n        }\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let optionValue = getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.findIndex(model => {\n          let modelValue = getTrackingValue(model, model);\n          return (modelValue === optionValue);\n        });\n        value.splice(i, 1);\n      }\n      else {\n        value.push(asObject ? option : optionValue);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"RadioButton-Group {{$ctrl.classes}}\">\n      <label class=\"RadioButton\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"RadioButton\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n      let optionValue = getTrackingValue(option, index);\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"SelectBox {{$ctrl.classes}}\">\n      <div class=\"Input-Wrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <div class=\"Input-Spinner\" ng-class=\"{'Input-Spinner--Visible': $ctrl.hasSpinner}\">\n          <div class=\"Caret\"\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\n            ng-click=\"$event.stopPropagation()\"\n            ng-if=\"!$ctrl.hasSpinner\"\n          ></div>\n          <input readonly class=\"Input\" type=\"text\"\n            ng-value=\"$ctrl.getSelectedLabel()\"\n            ng-keydown=\"$ctrl.keydown($event)\"\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\n        </div>\n      </div>\n      <ul class=\"SelectBox-Options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $attrs, $log, $formControls, $scope, $document, $timeout, $window\n  ) {\n\n    //Helper vars\n    const $ctrl = this;\n    let selectionIndex, $input, $container;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let phrase = '';\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Debounce helper\n     */\n    function debounce(func, delay) {\n\n      //Timeout placeholder\n      let timeout;\n\n      //Create wrapper function\n      const wrapper = function() {\n\n        //Clear any existing timeout\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        //Create new timeout\n        timeout = setTimeout(() => func(), delay);\n      };\n\n      //Return wrapper function\n      return wrapper;\n    }\n\n    /**\n     * Function to clear the phrase (debounced after 1.5 seconds)\n     */\n    const clearPhrase = debounce(() => {\n      phrase = '';\n    }, 1000);\n\n    /**\n     * Check if input was text\n     */\n    function isTextInput(event) {\n      if (event.keyCode >= 48 && event.keyCode <= 57) {\n        return true;\n      }\n      if (event.keyCode >= 65 && event.keyCode <= 90) {\n        return true;\n      }\n      if (event.keyCode === 32) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      console.log('document click handler');\n      if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n        console.log('hiding!');\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Find scrollable parent\n     */\n    function findScrollableParent($child) {\n\n      //Get parent\n      const $parent = $child.parent();\n      if ($parent.length === 0) {\n        return null;\n      }\n\n      //Get style\n      const style = $window.getComputedStyle($parent[0]);\n\n      //Find element that has auto overflow or which is the body\n      if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n        return $parent;\n      }\n\n      //Find next\n      return findScrollableParent($parent);\n    }\n\n    /**\n     * Find offset relative to a certain node\n     */\n    function findOffset(node, relativeNode) {\n      let offset = node.offsetTop;\n      while (node.offsetParent && node.offsetParent !== relativeNode) {\n        node = node.offsetParent;\n        offset += node.offsetTop;\n      }\n      return offset;\n    }\n\n    /**\n     * Ensure the whole dropdown is in view\n     */\n    function ensureDropdownInView() {\n\n      //Find scrollable parent\n      const $parent = findScrollableParent($element);\n      if (!$parent) {\n        return;\n      }\n\n      //Get params\n      const offset = findOffset($container[0], $parent[0]);\n      const height = $parent[0].clientHeight;\n      const scroll = $parent[0].scrollTop;\n      const bottom = offset - scroll + $container[0].clientHeight;\n\n      //Check if it's outside of the height\n      if (bottom > height) {\n        const diff = bottom - height + 16;\n        $parent[0].scrollTop += diff;\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Find options\n      const $options = $container.children();\n\n      //Get option now, taking into account the additional nullable element\n      const option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      const cTop = $container[0].scrollTop;\n      const cBottom = cTop + $container[0].clientHeight;\n      const eTop = option.offsetTop;\n      const eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().parent().next();\n\n      //Apply global click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Move selection up or down\n      if (event.keyCode === KeyCodes.UP) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionUp();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n      else if (event.keyCode === KeyCodes.DOWN) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionDown();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n\n      //Confirm selection\n      else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n        event.preventDefault();\n        this.confirmSelection();\n      }\n\n      //Hide options\n      else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n        event.preventDefault();\n        this.hideOptions();\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n        event.preventDefault();\n        this.showOptions();\n      }\n\n      //Text input\n      else if (isTextInput(event)) {\n        const char = String.fromCharCode(event.keyCode);\n        this.selectByInput(char);\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n        $timeout(() => {\n          ensureDropdownInView();\n        });\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      console.log('TOGGLE!');\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select by input character(s)\n     */\n    this.selectByInput = function(char) {\n\n      //Lowercase all the things\n      char = char.toLowerCase();\n\n      //Add to phrase\n      phrase += char;\n\n      //Create regex\n      const regex = new RegExp('^' + phrase, 'i');\n\n      //Find matching option\n      const option = this.options.find(option => {\n        const label = getLabelValue(option);\n        return label.match(regex);\n      });\n\n      //Match found?\n      if (option) {\n        const index = this.options.findIndex(o => o === option);\n        this.select(option, index, true);\n      }\n\n      //Clear phrase (debounced)\n      clearPhrase();\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index, leaveOpen) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      if (!leaveOpen) {\n        this.hideOptions();\n      }\n      else {\n        ensureSelectionInView();\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"TypeAhead\">\n      <span class=\"Input-Spinner\"\n        ng-class=\"{'Input-Spinner--Visible': $ctrl.isSearching}\">\n        <input class=\"Input\" type=\"text\"\n          placeholder=\"{{$ctrl.placeholder}}\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-keyup=\"$ctrl.keyup($event)\"\n          ng-disabled=\"$ctrl.isDisabled\"\n          ng-model=\"$ctrl.searchQuery\">\n        <spinner></spinner>\n      </span>\n      <ul class=\"TypeAhead-Results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}