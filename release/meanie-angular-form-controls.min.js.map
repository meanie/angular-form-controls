{"version":3,"sources":["meanie-angular-form-controls.min.js","form-controls.js","check-box/check-box.js","check-boxes/check-boxes.js","radio-buttons/radio-buttons.js","select-box/select-box.js"],"names":["window","angular","undefined","module","factory","hasChanged","changes","previousValue","currentValue","equals","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","isRequired","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$isEmpty","$onChanges","$validate","$setDirty","toggle","value","isChecked","options","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","modelValues","map","modelValue","asObject","find","classes","className","$$setOptions","allowInvalid","getLabel","item","checked","i","indexOf","splice","push","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","hasSpinner","$scope","$document","ensureSelectionInView","selectionIndex","$options","cTop","$container","scrollTop","cBottom","clientHeight","eTop","offsetTop","eBottom","documentClickHandler","event","$input","contains","target","isShowingOptions","$apply","hideOptions","bind","moveSelectionUp","oldIndex","moveSelectionDown","findOption","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","parent","next","on","$onDestroy","off","keydown","keyCode","preventDefault","confirmSelection","showOptions","getSelectedLabel","toggleOptions","hasOptions","setSelection","isSelection"],"mappings":"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","file":"meanie-angular-form-controls.min.js","sourcesContent":["/**\n * meanie-angular-form-controls - v1.0.2 - 27-5-2016\n * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"check-box\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle()\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('checkbox-wrapper');\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function () {\n\n        //Don't toggle when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"check-box-group {{$ctrl.classes}}\">\\n      <label class=\"check-box\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get the model and option values\n        var optionValue = getTrackingValue(option, index);\n        var modelValues = model.map(function (modelValue) {\n          if (asObject && angular.isObject(modelValue)) {\n            return getTrackingValue(modelValue);\n          }\n          return modelValue;\n        });\n\n        //See if present in model values\n        var find = modelValues.find(function (modelValue) {\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true\n          });\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var item = asObject ? option : getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.indexOf(item);\n          value.splice(i, 1);\n        } else {\n          value.push(item);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"radio-button-group {{$ctrl.classes}}\">\\n      <label class=\"radio-button\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"radio-button\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = $ctrl.model;\n        var optionValue = getTrackingValue(option, index);\n\n        //If the model is an object, get its tracking value\n        if (asObject && angular.isObject($ctrl.model)) {\n          modelValue = getTrackingValue($ctrl.model);\n        }\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"select-box {{$ctrl.classes}}\">\\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <span class=\"form-control-spinner\" ng-class=\"{\\'show-spinner\\': $ctrl.hasSpinner}\">\\n          <span class=\"caret\"\\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\\n            ng-if=\"!$ctrl.hasSpinner\"\\n          ></span>\\n          <input readonly class=\"form-control\" type=\"text\"\\n            ng-value=\"$ctrl.getSelectedLabel()\"\\n            ng-keydown=\"$ctrl.keydown($event)\"\\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\\n        </span>\\n      </div>\\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1)\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', function controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        //If the model is an object, get its tracking value\n        var modelValue = model;\n        if (asObject && angular.isObject(model)) {\n          modelValue = getTrackingValue(model);\n        }\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Apply document click handler\n        $document.on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingOptions) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideOptions();\n          }\n        }\n\n        //Enter or space either confirm selection or show options\n        if (event.keyCode === KeyCodes.ENTER || event.keyCode === KeyCodes.SPACE) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            this.confirmSelection();\n          } else {\n            this.showOptions();\n          }\n        }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideOptions();\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component'\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    }\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"check-box\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle()\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel'\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired'\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('checkbox-wrapper');\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function() {\n\n      //Don't toggle when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  }\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"check-box-group {{$ctrl.classes}}\">\n      <label class=\"check-box\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel'\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired'\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get the model and option values\n      let optionValue = getTrackingValue(option, index);\n      let modelValues = model.map(modelValue => {\n        if (asObject && angular.isObject(modelValue)) {\n          return getTrackingValue(modelValue);\n        }\n        return modelValue;\n      });\n\n      //See if present in model values\n      let find = modelValues.find(modelValue => modelValue === optionValue);\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        $ctrl.ngModel.$$setOptions({\n          allowInvalid: true\n        });\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let item = asObject ? option : getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.indexOf(item);\n        value.splice(i, 1);\n      }\n      else {\n        value.push(item);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  }\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"radio-button-group {{$ctrl.classes}}\">\n      <label class=\"radio-button\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"radio-button\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel'\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired'\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = $ctrl.model;\n      let optionValue = getTrackingValue(option, index);\n\n      //If the model is an object, get its tracking value\n      if (asObject && angular.isObject($ctrl.model)) {\n        modelValue = getTrackingValue($ctrl.model);\n      }\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  }\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"select-box {{$ctrl.classes}}\">\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <span class=\"form-control-spinner\" ng-class=\"{'show-spinner': $ctrl.hasSpinner}\">\n          <span class=\"caret\"\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\n            ng-if=\"!$ctrl.hasSpinner\"\n          ></span>\n          <input readonly class=\"form-control\" type=\"text\"\n            ng-value=\"$ctrl.getSelectedLabel()\"\n            ng-keydown=\"$ctrl.keydown($event)\"\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\n        </span>\n      </div>\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1)\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel'\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n    hasSpinner: '<hasSpinner'\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n    //Helper vars\n    let $ctrl = this;\n    let selectionIndex, $input, $container, $options;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40\n    };\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      //If the model is an object, get its tracking value\n      let modelValue = model;\n      if (asObject && angular.isObject(model)) {\n        modelValue = getTrackingValue(model);\n      }\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Apply document click handler\n      $document.on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingOptions) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideOptions();\n        }\n      }\n\n      //Enter or space either confirm selection or show options\n      if (event.keyCode === KeyCodes.ENTER ||\n        event.keyCode === KeyCodes.SPACE) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          this.confirmSelection();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideOptions();\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  }\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}