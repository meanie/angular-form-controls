{"version":3,"sources":["meanie-angular-form-controls.min.js","form-controls.js","check-box/check-box.js","check-boxes/check-boxes.js","radio-buttons/radio-buttons.js","select-box/select-box.js","type-ahead/type-ahead.js"],"names":["window","angular","undefined","module","factory","hasChanged","changes","previousValue","currentValue","equals","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$isEmpty","$onChanges","$validate","$setDirty","toggle","value","isChecked","options","min","max","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","find","modelValue","asObject","classes","className","$validators","$error","required","$$setOptions","allowInvalid","$options","createChild","getLabel","map","item","checked","i","findIndex","splice","push","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","hasSpinner","$scope","$document","$timeout","$window","debounce","func","delay","timeout","wrapper","clearTimeout","setTimeout","isTextInput","event","keyCode","documentClickHandler","$input","contains","target","isShowingOptions","$apply","hideOptions","bind","preventDefault","stopPropagation","findScrollableParent","$child","$parent","parent","style","getComputedStyle","tagName","overflowY","findOffset","node","relativeNode","offset","offsetTop","offsetParent","ensureDropdownInView","$container","height","clientHeight","scroll","scrollTop","bottom","diff","ensureSelectionInView","selectionIndex","children","cTop","cBottom","eTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","phrase","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","clearPhrase","next","on","$onDestroy","off","indexOf","keydown","showOptions","confirmSelection","char","String","fromCharCode","selectByInput","getSelectedLabel","toggleOptions","hasOptions","toLowerCase","regex","RegExp","label","match","o","leaveOpen","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","isControlInput","keys","TAB","isShowingResults","hideResults","searchOptions","resolve","items","filter","test","currentSearch","lastProcessedSearch","pendingSearch","attr","focus","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"meanie-angular-form-controls.min.js","sourcesContent":["/**\n * meanie-angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"CheckBox\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle()\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('check-box-wrapper');\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function () {\n\n        //Don't toggle when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"CheckBox-Group {{$ctrl.classes}}\">\\n      <label class=\"CheckBox\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      min: '<',\n      max: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get option value\n        var optionValue = getTrackingValue(option, index);\n\n        //See if present in model values\n        var find = model.find(function (model) {\n          var modelValue = getTrackingValue(model, model);\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Validation for min/max values\n        this.ngModel.$validators.min = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.min || $ctrl.min < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length >= $ctrl.min;\n        };\n        this.ngModel.$validators.max = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.max || $ctrl.max < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length <= $ctrl.max;\n        };\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          //NOTE: first approach for Angular < 1.6.0\n          if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n            $ctrl.ngModel.$$setOptions({\n              allowInvalid: true\n            });\n          } else {\n            $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n              allowInvalid: true\n            });\n          }\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var optionValue = getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.findIndex(function (model) {\n            var modelValue = getTrackingValue(model, model);\n            return modelValue === optionValue;\n          });\n          value.splice(i, 1);\n        } else {\n          value.push(asObject ? option : optionValue);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"RadioButton-Group {{$ctrl.classes}}\">\\n      <label class=\"RadioButton\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"RadioButton\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n        var optionValue = getTrackingValue(option, index);\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"SelectBox {{$ctrl.classes}}\">\\n      <div class=\"Input-Wrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <span class=\"Input-Spinner\" ng-class=\"{\\'Input-Spinner--Visible\\': $ctrl.hasSpinner}\">\\n          <span class=\"Caret\"\\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\\n            ng-if=\"!$ctrl.hasSpinner\"\\n          ></span>\\n          <input readonly class=\"Input\" type=\"text\"\\n            ng-value=\"$ctrl.getSelectedLabel()\"\\n            ng-keydown=\"$ctrl.keydown($event)\"\\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\\n        </span>\\n      </div>\\n      <ul class=\"SelectBox-Options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1)\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', '$timeout', '$window', function controller($element, $attrs, $log, $formControls, $scope, $document, $timeout, $window) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var phrase = '';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Debounce helper\n       */\n      function debounce(func, delay) {\n\n        //Timeout placeholder\n        var timeout = void 0;\n\n        //Create wrapper function\n        var wrapper = function wrapper() {\n\n          //Clear any existing timeout\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          //Create new timeout\n          timeout = setTimeout(function () {\n            return func();\n          }, delay);\n        };\n\n        //Return wrapper function\n        return wrapper;\n      }\n\n      /**\n       * Function to clear the phrase (debounced after 1.5 seconds)\n       */\n      var clearPhrase = debounce(function () {\n        phrase = '';\n      }, 1000);\n\n      /**\n       * Check if input was text\n       */\n      function isTextInput(event) {\n        if (event.keyCode >= 48 && event.keyCode <= 57) {\n          return true;\n        }\n        if (event.keyCode >= 65 && event.keyCode <= 90) {\n          return true;\n        }\n        if (event.keyCode === 32) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Find scrollable parent\n       */\n      function findScrollableParent($child) {\n\n        //Get parent\n        var $parent = $child.parent();\n        if ($parent.length === 0) {\n          return null;\n        }\n\n        //Get style\n        var style = $window.getComputedStyle($parent[0]);\n\n        //Find element that has auto overflow or which is the body\n        if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n          return $parent;\n        }\n\n        //Find next\n        return findScrollableParent($parent);\n      }\n\n      /**\n       * Find offset relative to a certain node\n       */\n      function findOffset(node, relativeNode) {\n        var offset = node.offsetTop;\n        while (node.offsetParent && node.offsetParent !== relativeNode) {\n          node = node.offsetParent;\n          offset += node.offsetTop;\n        }\n        return offset;\n      }\n\n      /**\n       * Ensure the whole dropdown is in view\n       */\n      function ensureDropdownInView() {\n\n        //Find scrollable parent\n        var $parent = findScrollableParent($element);\n        if (!$parent) {\n          return;\n        }\n\n        //Get params\n        var offset = findOffset($container[0], $parent[0]);\n        var height = $parent[0].clientHeight;\n        var scroll = $parent[0].scrollTop;\n        var bottom = offset - scroll + $container[0].clientHeight;\n\n        //Check if it's outside of the height\n        if (bottom > height) {\n          var diff = bottom - height + 16;\n          $parent[0].scrollTop += diff;\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Find options\n        var $options = $container.children();\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().parent().next();\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Move selection up or down\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionUp();\n          } else {\n            this.showOptions();\n          }\n        } else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionDown();\n          } else {\n            this.showOptions();\n          }\n        }\n\n        //Confirm selection\n        else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n\n          //Hide options\n          else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n              event.preventDefault();\n              this.hideOptions();\n            }\n\n            //Show options\n            else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n                event.preventDefault();\n                this.showOptions();\n              }\n\n              //Text input\n              else if (isTextInput(event)) {\n                  var char = String.fromCharCode(event.keyCode);\n                  this.selectByInput(char);\n                }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n          $timeout(function () {\n            ensureDropdownInView();\n          });\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select by input character(s)\n       */\n      this.selectByInput = function (char) {\n\n        //Lowercase all the things\n        char = char.toLowerCase();\n\n        //Add to phrase\n        phrase += char;\n\n        //Create regex\n        var regex = new RegExp('^' + phrase, 'i');\n\n        //Find matching option\n        var option = this.options.find(function (option) {\n          var label = getLabelValue(option);\n          return label.match(regex);\n        });\n\n        //Match found?\n        if (option) {\n          var index = this.options.findIndex(function (o) {\n            return o === option;\n          });\n          this.select(option, index, true);\n        }\n\n        //Clear phrase (debounced)\n        clearPhrase();\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index, leaveOpen) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        if (!leaveOpen) {\n          this.hideOptions();\n        } else {\n          ensureSelectionInView();\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"TypeAhead\">\\n      <span class=\"Input-Spinner\"\\n        ng-class=\"{\\'Input-Spinner--Visible\\': $ctrl.isSearching}\">\\n        <input class=\"Input\" type=\"text\"\\n          placeholder=\"{{$ctrl.placeholder}}\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-keyup=\"$ctrl.keyup($event)\"\\n          ng-disabled=\"$ctrl.isDisabled\"\\n          ng-model=\"$ctrl.searchQuery\">\\n        <spinner></spinner>\\n      </span>\\n      <ul class=\"TypeAhead-Results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"CheckBox\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle()\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('check-box-wrapper');\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function() {\n\n      //Don't toggle when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"CheckBox-Group {{$ctrl.classes}}\">\n      <label class=\"CheckBox\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    min: '<',\n    max: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get option value\n      let optionValue = getTrackingValue(option, index);\n\n      //See if present in model values\n      let find = model.find(model => {\n        let modelValue = getTrackingValue(model, model);\n        return (modelValue === optionValue);\n      });\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Validation for min/max values\n      this.ngModel.$validators.min = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.min || $ctrl.min < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length >= $ctrl.min);\n      };\n      this.ngModel.$validators.max = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.max || $ctrl.max < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length <= $ctrl.max);\n      };\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        //NOTE: first approach for Angular < 1.6.0\n        if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true,\n          });\n        }\n        else {\n          $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n            allowInvalid: true,\n          });\n        }\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let optionValue = getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.findIndex(model => {\n          let modelValue = getTrackingValue(model, model);\n          return (modelValue === optionValue);\n        });\n        value.splice(i, 1);\n      }\n      else {\n        value.push(asObject ? option : optionValue);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"RadioButton-Group {{$ctrl.classes}}\">\n      <label class=\"RadioButton\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"RadioButton\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n      let optionValue = getTrackingValue(option, index);\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"SelectBox {{$ctrl.classes}}\">\n      <div class=\"Input-Wrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <span class=\"Input-Spinner\" ng-class=\"{'Input-Spinner--Visible': $ctrl.hasSpinner}\">\n          <span class=\"Caret\"\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\n            ng-if=\"!$ctrl.hasSpinner\"\n          ></span>\n          <input readonly class=\"Input\" type=\"text\"\n            ng-value=\"$ctrl.getSelectedLabel()\"\n            ng-keydown=\"$ctrl.keydown($event)\"\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\n        </span>\n      </div>\n      <ul class=\"SelectBox-Options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1)\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $attrs, $log, $formControls, $scope, $document, $timeout, $window\n  ) {\n\n    //Helper vars\n    const $ctrl = this;\n    let selectionIndex, $input, $container;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let phrase = '';\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Debounce helper\n     */\n    function debounce(func, delay) {\n\n      //Timeout placeholder\n      let timeout;\n\n      //Create wrapper function\n      const wrapper = function() {\n\n        //Clear any existing timeout\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        //Create new timeout\n        timeout = setTimeout(() => func(), delay);\n      };\n\n      //Return wrapper function\n      return wrapper;\n    }\n\n    /**\n     * Function to clear the phrase (debounced after 1.5 seconds)\n     */\n    const clearPhrase = debounce(() => {\n      phrase = '';\n    }, 1000);\n\n    /**\n     * Check if input was text\n     */\n    function isTextInput(event) {\n      if (event.keyCode >= 48 && event.keyCode <= 57) {\n        return true;\n      }\n      if (event.keyCode >= 65 && event.keyCode <= 90) {\n        return true;\n      }\n      if (event.keyCode === 32) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Find scrollable parent\n     */\n    function findScrollableParent($child) {\n\n      //Get parent\n      const $parent = $child.parent();\n      if ($parent.length === 0) {\n        return null;\n      }\n\n      //Get style\n      const style = $window.getComputedStyle($parent[0]);\n\n      //Find element that has auto overflow or which is the body\n      if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n        return $parent;\n      }\n\n      //Find next\n      return findScrollableParent($parent);\n    }\n\n    /**\n     * Find offset relative to a certain node\n     */\n    function findOffset(node, relativeNode) {\n      let offset = node.offsetTop;\n      while (node.offsetParent && node.offsetParent !== relativeNode) {\n        node = node.offsetParent;\n        offset += node.offsetTop;\n      }\n      return offset;\n    }\n\n    /**\n     * Ensure the whole dropdown is in view\n     */\n    function ensureDropdownInView() {\n\n      //Find scrollable parent\n      const $parent = findScrollableParent($element);\n      if (!$parent) {\n        return;\n      }\n\n      //Get params\n      const offset = findOffset($container[0], $parent[0]);\n      const height = $parent[0].clientHeight;\n      const scroll = $parent[0].scrollTop;\n      const bottom = offset - scroll + $container[0].clientHeight;\n\n      //Check if it's outside of the height\n      if (bottom > height) {\n        const diff = bottom - height + 16;\n        $parent[0].scrollTop += diff;\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Find options\n      const $options = $container.children();\n\n      //Get option now, taking into account the additional nullable element\n      const option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      const cTop = $container[0].scrollTop;\n      const cBottom = cTop + $container[0].clientHeight;\n      const eTop = option.offsetTop;\n      const eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().parent().next();\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Move selection up or down\n      if (event.keyCode === KeyCodes.UP) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionUp();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n      else if (event.keyCode === KeyCodes.DOWN) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionDown();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n\n      //Confirm selection\n      else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n        event.preventDefault();\n        this.confirmSelection();\n      }\n\n      //Hide options\n      else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n        event.preventDefault();\n        this.hideOptions();\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n        event.preventDefault();\n        this.showOptions();\n      }\n\n      //Text input\n      else if (isTextInput(event)) {\n        const char = String.fromCharCode(event.keyCode);\n        this.selectByInput(char);\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n        $timeout(() => {\n          ensureDropdownInView();\n        });\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select by input character(s)\n     */\n    this.selectByInput = function(char) {\n\n      //Lowercase all the things\n      char = char.toLowerCase();\n\n      //Add to phrase\n      phrase += char;\n\n      //Create regex\n      const regex = new RegExp('^' + phrase, 'i');\n\n      //Find matching option\n      const option = this.options.find(option => {\n        const label = getLabelValue(option);\n        return label.match(regex);\n      });\n\n      //Match found?\n      if (option) {\n        const index = this.options.findIndex(o => o === option);\n        this.select(option, index, true);\n      }\n\n      //Clear phrase (debounced)\n      clearPhrase();\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index, leaveOpen) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      if (!leaveOpen) {\n        this.hideOptions();\n      }\n      else {\n        ensureSelectionInView();\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"TypeAhead\">\n      <span class=\"Input-Spinner\"\n        ng-class=\"{'Input-Spinner--Visible': $ctrl.isSearching}\">\n        <input class=\"Input\" type=\"text\"\n          placeholder=\"{{$ctrl.placeholder}}\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-keyup=\"$ctrl.keyup($event)\"\n          ng-disabled=\"$ctrl.isDisabled\"\n          ng-model=\"$ctrl.searchQuery\">\n        <spinner></spinner>\n      </span>\n      <ul class=\"TypeAhead-Results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}