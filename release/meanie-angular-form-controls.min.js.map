{"version":3,"sources":["meanie-angular-form-controls.min.js","form-controls.js","check-box/check-box.js","check-boxes/check-boxes.js","radio-buttons/radio-buttons.js","select-box/select-box.js","type-ahead/type-ahead.js"],"names":["window","angular","undefined","module","factory","hasChanged","changes","previousValue","currentValue","equals","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","isRequired","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$isEmpty","$onChanges","$validate","$setDirty","toggle","value","isChecked","options","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","modelValues","map","modelValue","asObject","find","classes","className","$$setOptions","allowInvalid","getLabel","item","checked","i","indexOf","splice","push","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","hasSpinner","$scope","$document","isControlInput","event","keys","KeyCodes","UP","DOWN","ENTER","ESC","keyCode","documentClickHandler","$input","contains","target","isShowingOptions","$apply","hideOptions","bind","preventDefault","stopPropagation","ensureSelectionInView","selectionIndex","$options","cTop","$container","scrollTop","cBottom","clientHeight","eTop","offsetTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","SPACE","parent","next","on","$onDestroy","off","keydown","confirmSelection","showOptions","getSelectedLabel","toggleOptions","hasOptions","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","$timeout","TAB","isShowingResults","hideResults","searchOptions","resolve","regex","RegExp","items","filter","label","test","debounce","currentSearch","lastProcessedSearch","pendingSearch","attr","focus","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"meanie-angular-form-controls.min.js","sourcesContent":["/**\n * meanie-angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"check-box\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle()\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('checkbox-wrapper');\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function () {\n\n        //Don't toggle when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"check-box-group {{$ctrl.classes}}\">\\n      <label class=\"check-box\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get the model and option values\n        var optionValue = getTrackingValue(option, index);\n        var modelValues = model.map(function (modelValue) {\n          if (asObject && angular.isObject(modelValue)) {\n            return getTrackingValue(modelValue);\n          }\n          return modelValue;\n        });\n\n        //See if present in model values\n        var find = modelValues.find(function (modelValue) {\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true\n          });\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var item = asObject ? option : getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.indexOf(item);\n          value.splice(i, 1);\n        } else {\n          value.push(item);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"radio-button-group {{$ctrl.classes}}\">\\n      <label class=\"radio-button\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"radio-button\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = $ctrl.model;\n        var optionValue = getTrackingValue(option, index);\n\n        //If the model is an object, get its tracking value\n        if (asObject && angular.isObject($ctrl.model)) {\n          modelValue = getTrackingValue($ctrl.model);\n        }\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"select-box {{$ctrl.classes}}\">\\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <span class=\"form-control-spinner\" ng-class=\"{\\'show-spinner\\': $ctrl.hasSpinner}\">\\n          <span class=\"caret\"\\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\\n            ng-if=\"!$ctrl.hasSpinner\"\\n          ></span>\\n          <input readonly class=\"form-control\" type=\"text\"\\n            ng-value=\"$ctrl.getSelectedLabel()\"\\n            ng-keydown=\"$ctrl.keydown($event)\"\\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\\n        </span>\\n      </div>\\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1)\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', function controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        //If the model is an object, get its tracking value\n        var modelValue = model;\n        if (asObject && angular.isObject(model)) {\n          modelValue = getTrackingValue(model);\n        }\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Apply document click handler\n        $document.on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingOptions && isControlInput(event)) {\n          event.preventDefault();\n          if (event.keyCode === KeyCodes.UP) {\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            this.hideOptions();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showOptions();\n          }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideOptions();\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"type-ahead\">\\n      <span class=\"form-control-spinner\"\\n        ng-class=\"{\\'show-spinner\\': $ctrl.isSearching}\">\\n        <input class=\"form-control\" type=\"text\"\\n          placeholder=\"{{$ctrl.placeholder}}\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-keyup=\"$ctrl.keyup($event)\"\\n          ng-disabled=\"$ctrl.isDisabled\"\\n          ng-model=\"$ctrl.searchQuery\">\\n        <spinner></spinner>\\n      </span>\\n      <ul class=\"type-ahead-results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      isRequired: '<ngRequired',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        //If the model is an object, get its tracking value\n        var modelValue = model;\n        if (asObject && angular.isObject(model)) {\n          modelValue = getTrackingValue(model);\n        }\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Global click event handler\n        $document.on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"check-box\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle()\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('checkbox-wrapper');\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function() {\n\n      //Don't toggle when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"check-box-group {{$ctrl.classes}}\">\n      <label class=\"check-box\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get the model and option values\n      let optionValue = getTrackingValue(option, index);\n      let modelValues = model.map(modelValue => {\n        if (asObject && angular.isObject(modelValue)) {\n          return getTrackingValue(modelValue);\n        }\n        return modelValue;\n      });\n\n      //See if present in model values\n      let find = modelValues.find(modelValue => modelValue === optionValue);\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        $ctrl.ngModel.$$setOptions({\n          allowInvalid: true,\n        });\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let item = asObject ? option : getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.indexOf(item);\n        value.splice(i, 1);\n      }\n      else {\n        value.push(item);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"radio-button-group {{$ctrl.classes}}\">\n      <label class=\"radio-button\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"radio-button\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = $ctrl.model;\n      let optionValue = getTrackingValue(option, index);\n\n      //If the model is an object, get its tracking value\n      if (asObject && angular.isObject($ctrl.model)) {\n        modelValue = getTrackingValue($ctrl.model);\n      }\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"select-box {{$ctrl.classes}}\">\n      <div class=\"form-control-wrapper clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <span class=\"form-control-spinner\" ng-class=\"{'show-spinner': $ctrl.hasSpinner}\">\n          <span class=\"caret\"\n            ng-click=\"$ctrl.toggleOptions(); $event.stopPropagation();\"\n            ng-class=\"{disabled: $ctrl.isDisabled}\"\n            ng-if=\"!$ctrl.hasSpinner\"\n          ></span>\n          <input readonly class=\"form-control\" type=\"text\"\n            ng-value=\"$ctrl.getSelectedLabel()\"\n            ng-keydown=\"$ctrl.keydown($event)\"\n            ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n          <spinner ng-if=\"$ctrl.hasSpinner\"></spinner>\n        </span>\n      </div>\n      <ul class=\"select-box-options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1)\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls, $scope, $document) {\n\n    //Helper vars\n    let $ctrl = this;\n    let selectionIndex, $input, $container, $options;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingOptions) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      //If the model is an object, get its tracking value\n      let modelValue = model;\n      if (asObject && angular.isObject(model)) {\n        modelValue = getTrackingValue(model);\n      }\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Apply document click handler\n      $document.on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingOptions && isControlInput(event)) {\n        event.preventDefault();\n        if (event.keyCode === KeyCodes.UP) {\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          this.hideOptions();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideOptions();\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"type-ahead\">\n      <span class=\"form-control-spinner\"\n        ng-class=\"{'show-spinner': $ctrl.isSearching}\">\n        <input class=\"form-control\" type=\"text\"\n          placeholder=\"{{$ctrl.placeholder}}\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-keyup=\"$ctrl.keyup($event)\"\n          ng-disabled=\"$ctrl.isDisabled\"\n          ng-model=\"$ctrl.searchQuery\">\n        <spinner></spinner>\n      </span>\n      <ul class=\"type-ahead-results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    isRequired: '<ngRequired',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      //If the model is an object, get its tracking value\n      let modelValue = model;\n      if (asObject && angular.isObject(model)) {\n        modelValue = getTrackingValue(model);\n      }\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Global click event handler\n      $document.on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}