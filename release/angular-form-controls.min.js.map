{"version":3,"sources":["angular-form-controls.min.js","check-box.js","check-boxes.js","form-controls.js","radio-buttons.js","select-box.js","type-ahead.js"],"names":["window","angular","undefined","module","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$label","find","on","focus","$isEmpty","$onChanges","changes","$validate","hasChanged","$setDirty","toggle","event","defaultPrevented","value","isChecked","options","min","max","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","modelValue","asObject","classes","className","$validators","$error","required","$$setOptions","allowInvalid","$options","createChild","split","set","Set","Array","from","values","getLabel","map","item","checked","i","findIndex","splice","push","factory","previousValue","currentValue","equals","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","inputClass","hasSpinner","$scope","$document","$timeout","$window","debounce","func","delay","timeout","wrapper","clearTimeout","setTimeout","isTextInput","keyCode","documentClickHandler","isShowingOptions","contains","target","$apply","hideOptions","bind","preventDefault","stopPropagation","findScrollableParent","$child","$parent","parent","style","getComputedStyle","tagName","overflowY","findOffset","node","relativeNode","offset","offsetTop","offsetParent","ensureDropdownInView","$container","height","clientHeight","scroll","scrollTop","bottom","diff","ensureSelectionInView","selectionIndex","children","cTop","cBottom","eTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","$input","phrase","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","clearPhrase","selectBoxClass","next","$onDestroy","off","indexOf","keydown","showOptions","confirmSelection","char","String","fromCharCode","selectByInput","getSelectedLabel","toggleOptions","hasOptions","toLowerCase","regex","RegExp","label","match","o","leaveOpen","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","isControlInput","keys","TAB","isShowingResults","hideResults","searchOptions","resolve","items","filter","test","currentSearch","lastProcessedSearch","pendingSearch","attr","typeAheadClass","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"angular-form-controls.min.js","sourcesContent":["/**\n * @meanie/angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2018 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"CheckBox\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle($event)\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('CheckBoxWrapper');\n\n        //Find label\n        var $label = $element.find('label');\n\n        //Propagate focus\n        $element.on('focus', function () {\n          $label[0].focus();\n        });\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function (event) {\n\n        //Don't toggle when disabled or event default prevented\n        if (this.isDisabled || event.defaultPrevented) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"CheckBoxGroup {{$ctrl.classes}}\">\\n      <label class=\"CheckBox\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      min: '<',\n      max: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get option value\n        var optionValue = getTrackingValue(option, index);\n\n        //See if present in model values\n        var find = model.find(function (model) {\n          var modelValue = getTrackingValue(model, model);\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Validation for min/max values\n        this.ngModel.$validators.min = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.min || $ctrl.min < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length >= $ctrl.min;\n        };\n        this.ngModel.$validators.max = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.max || $ctrl.max < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length <= $ctrl.max;\n        };\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          //NOTE: first approach for Angular < 1.6.0\n          if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n            $ctrl.ngModel.$$setOptions({\n              allowInvalid: true\n            });\n          } else {\n            $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n              allowInvalid: true\n            });\n          }\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          if (typeof this.options === 'string') {\n            var options = this.options.split('\\n');\n            var set = new Set(options);\n            this.options = Array.from(set.values());\n          } else {\n            this.options = [];\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var optionValue = getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.findIndex(function (model) {\n            var modelValue = getTrackingValue(model, model);\n            return modelValue === optionValue;\n          });\n          value.splice(i, 1);\n        } else {\n          value.push(asObject ? option : optionValue);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"RadioButtonGroup {{$ctrl.classes}}\">\\n      <label class=\"RadioButton\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"RadioButton\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n        var optionValue = getTrackingValue(option, index);\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || $ctrl.model === $ctrl.nullValue || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          if (typeof this.options === 'string') {\n            var options = this.options.split('\\n');\n            var set = new Set(options);\n            this.options = Array.from(set.values());\n          } else {\n            this.options = [];\n          }\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"SelectBox {{$ctrl.selectBoxClass}}\">\\n      <div class=\"InputWrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <div class=\"Caret\"\\n          ng-class=\"{disabled: $ctrl.isDisabled}\"\\n          ng-click=\"$event.stopPropagation(); $ctrl.toggleOptions();\"\\n          ng-if=\"!$ctrl.hasSpinner\"\\n        ></div>\\n        <input readonly class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\\n          ng-value=\"$ctrl.getSelectedLabel()\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n        <spinner class=\"Spinner--input\" ng-if=\"$ctrl.hasSpinner\"></spinner>\\n      </div>\\n      <ul class=\"SelectBox-options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      inputClass: '@',\n      isDisabled: '<ngDisabled',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', '$timeout', '$window', function controller($element, $attrs, $log, $formControls, $scope, $document, $timeout, $window) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var phrase = '';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Debounce helper\n       */\n      function debounce(func, delay) {\n\n        //Timeout placeholder\n        var timeout = void 0;\n\n        //Create wrapper function\n        var wrapper = function wrapper() {\n\n          //Clear any existing timeout\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          //Create new timeout\n          timeout = setTimeout(function () {\n            return func();\n          }, delay);\n        };\n\n        //Return wrapper function\n        return wrapper;\n      }\n\n      /**\n       * Function to clear the phrase (debounced after 1.5 seconds)\n       */\n      var clearPhrase = debounce(function () {\n        phrase = '';\n      }, 1000);\n\n      /**\n       * Check if input was text\n       */\n      function isTextInput(event) {\n        if (event.keyCode >= 48 && event.keyCode <= 57) {\n          return true;\n        }\n        if (event.keyCode >= 65 && event.keyCode <= 90) {\n          return true;\n        }\n        if (event.keyCode === 32) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Find scrollable parent\n       */\n      function findScrollableParent($child) {\n\n        //Get parent\n        var $parent = $child.parent();\n        if ($parent.length === 0) {\n          return null;\n        }\n\n        //Get style\n        var style = $window.getComputedStyle($parent[0]);\n\n        //Find element that has auto overflow or which is the body\n        if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n          return $parent;\n        }\n\n        //Find next\n        return findScrollableParent($parent);\n      }\n\n      /**\n       * Find offset relative to a certain node\n       */\n      function findOffset(node, relativeNode) {\n        var offset = node.offsetTop;\n        while (node.offsetParent && node.offsetParent !== relativeNode) {\n          node = node.offsetParent;\n          offset += node.offsetTop;\n        }\n        return offset;\n      }\n\n      /**\n       * Ensure the whole dropdown is in view\n       */\n      function ensureDropdownInView() {\n\n        //Find scrollable parent\n        var $parent = findScrollableParent($element);\n        if (!$parent) {\n          return;\n        }\n\n        //Get params\n        var offset = findOffset($container[0], $parent[0]);\n        var height = $parent[0].clientHeight;\n        var scroll = $parent[0].scrollTop;\n        var bottom = offset - scroll + $container[0].clientHeight;\n\n        //Check if it's outside of the height\n        if (bottom > height) {\n          var diff = bottom - height + 16;\n          $parent[0].scrollTop += diff;\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Find options\n        var $options = $container.children();\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.selectBoxClass = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n\n        //Apply global click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || $ctrl.model === $ctrl.nullValue || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          if (typeof this.options === 'string') {\n            var options = this.options.split('\\n');\n            var set = new Set(options);\n            this.options = Array.from(set.values());\n          } else {\n            this.options = [];\n          }\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Move selection up or down\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionUp();\n          } else {\n            this.showOptions();\n          }\n        } else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionDown();\n          } else {\n            this.showOptions();\n          }\n        }\n\n        //Confirm selection\n        else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n\n          //Hide options\n          else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n              event.preventDefault();\n              this.hideOptions();\n            }\n\n            //Show options\n            else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n                event.preventDefault();\n                this.showOptions();\n              }\n\n              //Text input\n              else if (isTextInput(event)) {\n                  var char = String.fromCharCode(event.keyCode);\n                  this.selectByInput(char);\n                }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n          $timeout(function () {\n            ensureDropdownInView();\n            ensureSelectionInView();\n          });\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select by input character(s)\n       */\n      this.selectByInput = function (char) {\n\n        //Lowercase all the things\n        char = char.toLowerCase();\n\n        //Add to phrase\n        phrase += char;\n\n        //Create regex\n        var regex = new RegExp('^' + phrase, 'i');\n\n        //Find matching option\n        var option = this.options.find(function (option) {\n          var label = getLabelValue(option);\n          return label.match(regex);\n        });\n\n        //Match found?\n        if (option) {\n          var index = this.options.findIndex(function (o) {\n            return o === option;\n          });\n          this.select(option, index, true);\n        }\n\n        //Clear phrase (debounced)\n        clearPhrase();\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index, leaveOpen) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        if (!leaveOpen) {\n          this.hideOptions();\n        } else {\n          ensureSelectionInView();\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"TypeAhead {{$ctrl.typeAheadClass}}\">\\n      <input class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\\n        placeholder=\"{{$ctrl.placeholder}}\"\\n        ng-keydown=\"$ctrl.keydown($event)\"\\n        ng-keyup=\"$ctrl.keyup($event)\"\\n        ng-disabled=\"$ctrl.isDisabled\"\\n        ng-model=\"$ctrl.searchQuery\">\\n      <spinner class=\"Spinner--input\"></spinner>\\n      <ul class=\"TypeAhead-results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      inputClass: '@',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.next().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Propagate classes\n        this.typeAheadClass = $element[0].className;\n        $element[0].className = '';\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"CheckBox\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle($event)\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('CheckBoxWrapper');\n\n      //Find label\n      const $label = $element.find('label');\n\n      //Propagate focus\n      $element.on('focus', () => {\n        $label[0].focus();\n      });\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function(event) {\n\n      //Don't toggle when disabled or event default prevented\n      if (this.isDisabled || event.defaultPrevented) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"CheckBoxGroup {{$ctrl.classes}}\">\n      <label class=\"CheckBox\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    min: '<',\n    max: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get option value\n      let optionValue = getTrackingValue(option, index);\n\n      //See if present in model values\n      let find = model.find(model => {\n        let modelValue = getTrackingValue(model, model);\n        return (modelValue === optionValue);\n      });\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Validation for min/max values\n      this.ngModel.$validators.min = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.min || $ctrl.min < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length >= $ctrl.min);\n      };\n      this.ngModel.$validators.max = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.max || $ctrl.max < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length <= $ctrl.max);\n      };\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        //NOTE: first approach for Angular < 1.6.0\n        if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true,\n          });\n        }\n        else {\n          $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n            allowInvalid: true,\n          });\n        }\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        if (typeof this.options === 'string') {\n          const options = this.options.split('\\n');\n          const set = new Set(options);\n          this.options = Array.from(set.values());\n        }\n        else {\n          this.options = [];\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let optionValue = getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.findIndex(model => {\n          let modelValue = getTrackingValue(model, model);\n          return (modelValue === optionValue);\n        });\n        value.splice(i, 1);\n      }\n      else {\n        value.push(asObject ? option : optionValue);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"RadioButtonGroup {{$ctrl.classes}}\">\n      <label class=\"RadioButton\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"RadioButton\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n      let optionValue = getTrackingValue(option, index);\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return (\n          $ctrl.model === null ||\n          $ctrl.model === $ctrl.nullValue ||\n          typeof $ctrl.model === 'undefined'\n        );\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        if (typeof this.options === 'string') {\n          const options = this.options.split('\\n');\n          const set = new Set(options);\n          this.options = Array.from(set.values());\n        }\n        else {\n          this.options = [];\n        }\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"SelectBox {{$ctrl.selectBoxClass}}\">\n      <div class=\"InputWrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <div class=\"Caret\"\n          ng-class=\"{disabled: $ctrl.isDisabled}\"\n          ng-click=\"$event.stopPropagation(); $ctrl.toggleOptions();\"\n          ng-if=\"!$ctrl.hasSpinner\"\n        ></div>\n        <input readonly class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\n          ng-value=\"$ctrl.getSelectedLabel()\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n        <spinner class=\"Spinner--input\" ng-if=\"$ctrl.hasSpinner\"></spinner>\n      </div>\n      <ul class=\"SelectBox-options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    inputClass: '@',\n    isDisabled: '<ngDisabled',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $attrs, $log, $formControls, $scope, $document, $timeout, $window\n  ) {\n\n    //Helper vars\n    const $ctrl = this;\n    let selectionIndex, $input, $container;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let phrase = '';\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Debounce helper\n     */\n    function debounce(func, delay) {\n\n      //Timeout placeholder\n      let timeout;\n\n      //Create wrapper function\n      const wrapper = function() {\n\n        //Clear any existing timeout\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        //Create new timeout\n        timeout = setTimeout(() => func(), delay);\n      };\n\n      //Return wrapper function\n      return wrapper;\n    }\n\n    /**\n     * Function to clear the phrase (debounced after 1.5 seconds)\n     */\n    const clearPhrase = debounce(() => {\n      phrase = '';\n    }, 1000);\n\n    /**\n     * Check if input was text\n     */\n    function isTextInput(event) {\n      if (event.keyCode >= 48 && event.keyCode <= 57) {\n        return true;\n      }\n      if (event.keyCode >= 65 && event.keyCode <= 90) {\n        return true;\n      }\n      if (event.keyCode === 32) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Find scrollable parent\n     */\n    function findScrollableParent($child) {\n\n      //Get parent\n      const $parent = $child.parent();\n      if ($parent.length === 0) {\n        return null;\n      }\n\n      //Get style\n      const style = $window.getComputedStyle($parent[0]);\n\n      //Find element that has auto overflow or which is the body\n      if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n        return $parent;\n      }\n\n      //Find next\n      return findScrollableParent($parent);\n    }\n\n    /**\n     * Find offset relative to a certain node\n     */\n    function findOffset(node, relativeNode) {\n      let offset = node.offsetTop;\n      while (node.offsetParent && node.offsetParent !== relativeNode) {\n        node = node.offsetParent;\n        offset += node.offsetTop;\n      }\n      return offset;\n    }\n\n    /**\n     * Ensure the whole dropdown is in view\n     */\n    function ensureDropdownInView() {\n\n      //Find scrollable parent\n      const $parent = findScrollableParent($element);\n      if (!$parent) {\n        return;\n      }\n\n      //Get params\n      const offset = findOffset($container[0], $parent[0]);\n      const height = $parent[0].clientHeight;\n      const scroll = $parent[0].scrollTop;\n      const bottom = offset - scroll + $container[0].clientHeight;\n\n      //Check if it's outside of the height\n      if (bottom > height) {\n        const diff = bottom - height + 16;\n        $parent[0].scrollTop += diff;\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Find options\n      const $options = $container.children();\n\n      //Get option now, taking into account the additional nullable element\n      const option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      const cTop = $container[0].scrollTop;\n      const cBottom = cTop + $container[0].clientHeight;\n      const eTop = option.offsetTop;\n      const eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.selectBoxClass = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n\n      //Apply global click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return (\n          $ctrl.model === null ||\n          $ctrl.model === $ctrl.nullValue ||\n          typeof $ctrl.model === 'undefined'\n        );\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        if (typeof this.options === 'string') {\n          const options = this.options.split('\\n');\n          const set = new Set(options);\n          this.options = Array.from(set.values());\n        }\n        else {\n          this.options = [];\n        }\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Move selection up or down\n      if (event.keyCode === KeyCodes.UP) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionUp();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n      else if (event.keyCode === KeyCodes.DOWN) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionDown();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n\n      //Confirm selection\n      else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n        event.preventDefault();\n        this.confirmSelection();\n      }\n\n      //Hide options\n      else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n        event.preventDefault();\n        this.hideOptions();\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n        event.preventDefault();\n        this.showOptions();\n      }\n\n      //Text input\n      else if (isTextInput(event)) {\n        const char = String.fromCharCode(event.keyCode);\n        this.selectByInput(char);\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n        $timeout(() => {\n          ensureDropdownInView();\n          ensureSelectionInView();\n        });\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select by input character(s)\n     */\n    this.selectByInput = function(char) {\n\n      //Lowercase all the things\n      char = char.toLowerCase();\n\n      //Add to phrase\n      phrase += char;\n\n      //Create regex\n      const regex = new RegExp('^' + phrase, 'i');\n\n      //Find matching option\n      const option = this.options.find(option => {\n        const label = getLabelValue(option);\n        return label.match(regex);\n      });\n\n      //Match found?\n      if (option) {\n        const index = this.options.findIndex(o => o === option);\n        this.select(option, index, true);\n      }\n\n      //Clear phrase (debounced)\n      clearPhrase();\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index, leaveOpen) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      if (!leaveOpen) {\n        this.hideOptions();\n      }\n      else {\n        ensureSelectionInView();\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"TypeAhead {{$ctrl.typeAheadClass}}\">\n      <input class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\n        placeholder=\"{{$ctrl.placeholder}}\"\n        ng-keydown=\"$ctrl.keydown($event)\"\n        ng-keyup=\"$ctrl.keyup($event)\"\n        ng-disabled=\"$ctrl.isDisabled\"\n        ng-model=\"$ctrl.searchQuery\">\n      <spinner class=\"Spinner--input\"></spinner>\n      <ul class=\"TypeAhead-results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    inputClass: '@',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.next().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Propagate classes\n      this.typeAheadClass = $element[0].className;\n      $element[0].className = '';\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}