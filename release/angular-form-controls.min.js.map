{"version":3,"sources":["angular-form-controls.min.js","check-box.js","check-boxes.js","form-controls.js","radio-buttons.js","select-box.js","type-ahead.js"],"names":["window","angular","undefined","module","component","template","require","ngModel","transclude","bindings","model","onChange","isInverse","isDisabled","controller","$element","$formControls","$ctrl","this","$onInit","addClass","$label","find","on","focus","$isEmpty","$onChanges","changes","$validate","hasChanged","$setDirty","toggle","event","defaultPrevented","value","isChecked","options","min","max","$attrs","$log","getTrackingValue","option","index","trackBy","isObject","warn","getLabelValue","labelBy","isArray","length","optionValue","modelValue","asObject","classes","className","$validators","$error","required","$$setOptions","allowInvalid","$options","createChild","getLabel","map","item","checked","i","findIndex","splice","push","factory","previousValue","currentValue","equals","isNullable","nullValue","nullLabel","getModelValue","isSelected","select","inputClass","hasSpinner","$scope","$document","$timeout","$window","debounce","func","delay","timeout","wrapper","clearTimeout","setTimeout","isTextInput","keyCode","documentClickHandler","isShowingOptions","contains","target","$apply","hideOptions","bind","preventDefault","stopPropagation","findScrollableParent","$child","$parent","parent","style","getComputedStyle","tagName","overflowY","findOffset","node","relativeNode","offset","offsetTop","offsetParent","ensureDropdownInView","$container","height","clientHeight","scroll","scrollTop","bottom","diff","ensureSelectionInView","selectionIndex","children","cTop","cBottom","eTop","eBottom","moveSelectionUp","oldIndex","moveSelectionDown","findOption","$input","phrase","KeyCodes","ENTER","ESC","SPACE","UP","DOWN","clearPhrase","selectBoxClass","next","$onDestroy","off","indexOf","keydown","showOptions","confirmSelection","char","String","fromCharCode","selectByInput","getSelectedLabel","toggleOptions","hasOptions","toLowerCase","regex","RegExp","label","match","o","leaveOpen","setSelection","isSelection","placeholder","onSearch","onQuery","minLength","allowNew","$q","isControlInput","keys","TAB","isShowingResults","hideResults","searchOptions","resolve","items","filter","test","currentSearch","lastProcessedSearch","pendingSearch","attr","typeAheadClass","results","isSearching","searchQuery","showResults","keyup","trim","search","hasResults","clearResults","clearSelection","_this","doSearch","_this2","reject","then"],"mappings":"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","file":"angular-form-controls.min.js","sourcesContent":["/**\n * @meanie/angular-form-controls * https://github.com/meanie/angular-form-controls\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBox.Component', [])\n\n  /**\n   * Checkbox component\n   */\n  .component('checkBox', {\n    template: '<label class=\"CheckBox\"\\n      ng-transclude\\n      ng-click=\"$ctrl.toggle($event)\"\\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\\n    ></label>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    transclude: true,\n    bindings: {\n      model: '<ngModel',\n      onChange: '&',\n      isInverse: '<isInverse',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$formControls', function controller($element, $formControls) {\n\n      //Get instance\n      var $ctrl = this;\n\n      /**\n       * On init\n       */\n      this.$onInit = function () {\n\n        //Add checkbox wrapper class to parent component\n        $element.addClass('CheckBoxWrapper');\n\n        //Find label\n        var $label = $element.find('label');\n\n        //Propagate focus\n        $element.on('focus', function () {\n          $label[0].focus();\n        });\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isInverse) {\n            return !!$ctrl.model;\n          }\n          return !$ctrl.model;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Toggle\n       */\n      this.toggle = function (event) {\n\n        //Don't toggle when disabled or event default prevented\n        if (this.isDisabled || event.defaultPrevented) {\n          return;\n        }\n\n        //Get boolean value and call on change handler\n        var value = !this.model;\n        this.onChange({ value: value });\n      };\n\n      /**\n       * Check if checked\n       */\n      this.isChecked = function () {\n        return this.isInverse ? !this.model : !!this.model;\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('CheckBoxes.Component', [])\n\n  /**\n   * Checkboxes component\n   */\n  .component('checkBoxes', {\n    template: '<div class=\"CheckBoxGroup {{$ctrl.classes}}\">\\n      <label class=\"CheckBox\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.toggle(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      min: '<',\n      max: '<',\n      onChange: '&',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for check boxes');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for check boxes');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for check box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is checked\n       */\n      function isChecked(model, option, index) {\n\n        //Nothing selected?\n        if (!angular.isArray(model) || model.length === 0) {\n          return false;\n        }\n\n        //Get option value\n        var optionValue = getTrackingValue(option, index);\n\n        //See if present in model values\n        var find = model.find(function (model) {\n          var modelValue = getTrackingValue(model, model);\n          return modelValue === optionValue;\n        });\n        return typeof find !== 'undefined';\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track check boxes by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Validation for min/max values\n        this.ngModel.$validators.min = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.min || $ctrl.min < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length >= $ctrl.min;\n        };\n        this.ngModel.$validators.max = function (modelValue) {\n          if ($ctrl.ngModel.$error.required) {\n            return true;\n          }\n          if (!$ctrl.max || $ctrl.max < 0) {\n            return true;\n          }\n          return !angular.isArray(modelValue) || modelValue.length <= $ctrl.max;\n        };\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n\n          //Needed here to prevent $validate from setting the model to undefined\n          //NOTE: first approach for Angular < 1.6.0\n          if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n            $ctrl.ngModel.$$setOptions({\n              allowInvalid: true\n            });\n          } else {\n            $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n              allowInvalid: true\n            });\n          }\n\n          //Return check now\n          return !angular.isArray($ctrl.model) || $ctrl.model.length === 0;\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is checked\n       */\n      this.isChecked = function (option, index) {\n        return isChecked(this.model, option, index);\n      };\n\n      /**\n       * Toggle an option\n       */\n      this.toggle = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Initialize value of our model array\n        var value = [];\n        if (angular.isArray(this.model)) {\n          value = this.model.map(function (item) {\n            return item;\n          });\n        }\n\n        //Check if currently checked (use source model) and get the item value\n        var checked = isChecked(value, option, index);\n        var optionValue = getTrackingValue(option, index);\n\n        //If checked, remove from target model, otherwise add\n        if (checked) {\n          var i = value.findIndex(function (model) {\n            var modelValue = getTrackingValue(model, model);\n            return modelValue === optionValue;\n          });\n          value.splice(i, 1);\n        } else {\n          value.push(asObject ? option : optionValue);\n        }\n\n        //Call on change handler\n        this.onChange({ value: value });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('FormControls.Component', ['CheckBox.Component', 'CheckBoxes.Component', 'RadioButtons.Component', 'SelectBox.Component', 'TypeAhead.Component'])\n\n  /**\n   * Helper service\n   */\n  .factory('$formControls', function () {\n    return {\n\n      /**\n       * Check if an item value really changed (deep checking with angular.equals)\n       */\n\n      hasChanged: function hasChanged(changes) {\n\n        //Get previous and current value\n        var previousValue = changes.previousValue;\n        var currentValue = changes.currentValue;\n\n        //If unitialized, don't trigger changes\n\n        if (previousValue === 'UNINITIALIZED_VALUE') {\n          return false;\n        }\n\n        //Check if equals\n        return !angular.equals(previousValue, currentValue);\n      }\n    };\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('RadioButtons.Component', [])\n\n  /**\n   * Radio buttons component\n   */\n  .component('radioButtons', {\n    template: '<div class=\"RadioButtonGroup {{$ctrl.classes}}\">\\n      <label class=\"RadioButton\"\\n        ng-if=\"$ctrl.isNullable\"\\n        ng-click=\"$ctrl.select(null)\"\\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.nullLabel}}</label>\\n      <label class=\"RadioButton\"\\n        ng-repeat=\"option in $ctrl.options\"\\n        ng-click=\"$ctrl.select(option, $index)\"\\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\\n      >{{$ctrl.getLabel(option)}}</label>\\n    </div>',\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      isDisabled: '<ngDisabled'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', function controller($element, $attrs, $log, $formControls) {\n\n      //Helper vars\n      var $ctrl = this;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for radio buttons');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for selectbox');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Check if a certain option is selected\n       */\n      function isSelected(option, index) {\n\n        //Nullable and null value selected?\n        if ($ctrl.isNullable && $ctrl.model === $ctrl.nullValue && option === null) {\n          return true;\n        }\n\n        //Nothing selected?\n        if ($ctrl.model === null) {\n          return false;\n        }\n\n        //Get the model and option values\n        var modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n        var optionValue = getTrackingValue(option, index);\n\n        //Compare the two\n        return modelValue === optionValue;\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track radio buttons by index if model is an object');\n          asObject = false;\n        }\n\n        //Propagate classes\n        this.classes = $element[0].className;\n        $element[0].className = '';\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = 'None';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Check if given option is selected\n       */\n      this.isSelected = function (option, index) {\n        return isSelected(option, index);\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('SelectBox.Component', [])\n\n  /**\n   * Selectbox component\n   */\n  .component('selectBox', {\n    template: '<div class=\"SelectBox {{$ctrl.selectBoxClass}}\">\\n      <div class=\"InputWrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\\n        <div class=\"Caret\"\\n          ng-class=\"{disabled: $ctrl.isDisabled}\"\\n          ng-click=\"$event.stopPropagation()\"\\n          ng-if=\"!$ctrl.hasSpinner\"\\n        ></div>\\n        <input readonly class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\\n          ng-value=\"$ctrl.getSelectedLabel()\"\\n          ng-keydown=\"$ctrl.keydown($event)\"\\n          ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\\n        <spinner class=\"Spinner--input\" ng-if=\"$ctrl.hasSpinner\"></spinner>\\n      </div>\\n      <ul class=\"SelectBox-options\" ng-show=\"$ctrl.isShowingOptions\">\\n        <li\\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\\n        >{{$ctrl.nullLabel}}</li>\\n        <li\\n          ng-transclude\\n          ng-repeat=\"option in $ctrl.options\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\\n        >{{$ctrl.getLabel(option)}}</li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      options: '<',\n      onChange: '&',\n      isNullable: '<',\n      nullValue: '<',\n      nullLabel: '<',\n      inputClass: '<',\n      isDisabled: '<ngDisabled',\n      hasSpinner: '<hasSpinner'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$attrs', '$log', '$formControls', '$scope', '$document', '$timeout', '$window', function controller($element, $attrs, $log, $formControls, $scope, $document, $timeout, $window) {\n\n      //Helper vars\n      var $ctrl = this;\n      var selectionIndex = void 0,\n          $input = void 0,\n          $container = void 0;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var phrase = '';\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Debounce helper\n       */\n      function debounce(func, delay) {\n\n        //Timeout placeholder\n        var timeout = void 0;\n\n        //Create wrapper function\n        var wrapper = function wrapper() {\n\n          //Clear any existing timeout\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          //Create new timeout\n          timeout = setTimeout(function () {\n            return func();\n          }, delay);\n        };\n\n        //Return wrapper function\n        return wrapper;\n      }\n\n      /**\n       * Function to clear the phrase (debounced after 1.5 seconds)\n       */\n      var clearPhrase = debounce(function () {\n        phrase = '';\n      }, 1000);\n\n      /**\n       * Check if input was text\n       */\n      function isTextInput(event) {\n        if (event.keyCode >= 48 && event.keyCode <= 57) {\n          return true;\n        }\n        if (event.keyCode >= 65 && event.keyCode <= 90) {\n          return true;\n        }\n        if (event.keyCode === 32) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n          $scope.$apply($ctrl.hideOptions.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Find scrollable parent\n       */\n      function findScrollableParent($child) {\n\n        //Get parent\n        var $parent = $child.parent();\n        if ($parent.length === 0) {\n          return null;\n        }\n\n        //Get style\n        var style = $window.getComputedStyle($parent[0]);\n\n        //Find element that has auto overflow or which is the body\n        if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n          return $parent;\n        }\n\n        //Find next\n        return findScrollableParent($parent);\n      }\n\n      /**\n       * Find offset relative to a certain node\n       */\n      function findOffset(node, relativeNode) {\n        var offset = node.offsetTop;\n        while (node.offsetParent && node.offsetParent !== relativeNode) {\n          node = node.offsetParent;\n          offset += node.offsetTop;\n        }\n        return offset;\n      }\n\n      /**\n       * Ensure the whole dropdown is in view\n       */\n      function ensureDropdownInView() {\n\n        //Find scrollable parent\n        var $parent = findScrollableParent($element);\n        if (!$parent) {\n          return;\n        }\n\n        //Get params\n        var offset = findOffset($container[0], $parent[0]);\n        var height = $parent[0].clientHeight;\n        var scroll = $parent[0].scrollTop;\n        var bottom = offset - scroll + $container[0].clientHeight;\n\n        //Check if it's outside of the height\n        if (bottom > height) {\n          var diff = bottom - height + 16;\n          $parent[0].scrollTop += diff;\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Find options\n        var $options = $container.children();\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option, index) {\n\n        //Null value?\n        if (option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          return index;\n        }\n\n        //Non object? Track by its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for select box');\n          return $ctrl.nullValue;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n          return $ctrl.nullValue;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option, index) {\n\n        //If nullable and null option given, return null value\n        if ($ctrl.isNullable && option === null) {\n          return $ctrl.nullValue;\n        }\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option, index);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return $ctrl.nullLabel;\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for select box');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for select box label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Initialization\n       */\n      this.$onInit = function () {\n\n        //Check configuration\n        if (asObject && trackBy === '$index') {\n          $log.warn('Cannot track select box by index if model is an object');\n          asObject = false;\n        }\n\n        //Initialize flags\n        this.isShowingOptions = false;\n\n        //Propagate classes\n        this.selectBoxClass = $element[0].className;\n        $element[0].className = '';\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.parent().next();\n\n        //Apply global click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.isNullable) {\n            return $ctrl.model === $ctrl.nullValue;\n          }\n          return $ctrl.model === null || typeof $ctrl.model === 'undefined';\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * On change\n       */\n      this.$onChanges = function (changes) {\n\n        //Must have array as options\n        if (!angular.isArray(this.options)) {\n          this.options = [];\n        }\n\n        //Set default null value/label if not set\n        if (typeof this.nullValue === 'undefined') {\n          this.nullValue = null;\n        }\n        if (typeof this.nullLabel === 'undefined') {\n          this.nullLabel = '...';\n        }\n\n        //Set model to null value if not defined or null\n        if (this.isNullable) {\n          if (this.model === null || typeof this.model === 'undefined') {\n            this.model = this.nullValue;\n          }\n        }\n\n        //If disabled, hide options\n        if (this.isDisabled) {\n          this.isShowingOptions = false;\n        }\n\n        //Determine selection index\n        var option = findOption(this.model, this.options);\n        selectionIndex = this.options.indexOf(option);\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Keydown handler for input element\n       */\n      this.keydown = function (event) {\n\n        //Move selection up or down\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionUp();\n          } else {\n            this.showOptions();\n          }\n        } else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          if (this.isShowingOptions) {\n            moveSelectionDown();\n          } else {\n            this.showOptions();\n          }\n        }\n\n        //Confirm selection\n        else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n\n          //Hide options\n          else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n              event.preventDefault();\n              this.hideOptions();\n            }\n\n            //Show options\n            else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n                event.preventDefault();\n                this.showOptions();\n              }\n\n              //Text input\n              else if (isTextInput(event)) {\n                  var char = String.fromCharCode(event.keyCode);\n                  this.selectByInput(char);\n                }\n      };\n\n      /**\n       * Get label value of selected option\n       */\n      this.getSelectedLabel = function () {\n        var option = findOption(this.model, this.options);\n        return getLabelValue(option);\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Show options\n       */\n      this.showOptions = function () {\n        if (!this.isDisabled && !this.hasSpinner) {\n          this.isShowingOptions = true;\n          $timeout(function () {\n            ensureDropdownInView();\n          });\n        }\n      };\n\n      /**\n       * Hide options\n       */\n      this.hideOptions = function () {\n        this.isShowingOptions = false;\n      };\n\n      /**\n       * Toggle options\n       */\n      this.toggleOptions = function () {\n        if (this.isShowingOptions) {\n          this.hideOptions();\n        } else {\n          this.showOptions();\n        }\n      };\n\n      /**\n       * Has options check\n       */\n      this.hasOptions = function () {\n        return this.options.length > 0;\n      };\n\n      /**\n       * Select by input character(s)\n       */\n      this.selectByInput = function (char) {\n\n        //Lowercase all the things\n        char = char.toLowerCase();\n\n        //Add to phrase\n        phrase += char;\n\n        //Create regex\n        var regex = new RegExp('^' + phrase, 'i');\n\n        //Find matching option\n        var option = this.options.find(function (option) {\n          var label = getLabelValue(option);\n          return label.match(regex);\n        });\n\n        //Match found?\n        if (option) {\n          var index = this.options.findIndex(function (o) {\n            return o === option;\n          });\n          this.select(option, index, true);\n        }\n\n        //Clear phrase (debounced)\n        clearPhrase();\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option, index, leaveOpen) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        if (!leaveOpen) {\n          this.hideOptions();\n        } else {\n          ensureSelectionInView();\n        }\n\n        //Get the new model value and call on change handler\n        var value = getModelValue(option, index);\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Initialize option\n        var option = void 0;\n\n        //Nullable and -1 index given?\n        if (this.isNullable && index === -1) {\n          option = null;\n        }\n\n        //Otherwise, take from given options\n        else {\n\n            //Validate index\n            if (!this.hasOptions() || typeof index === 'undefined' || typeof this.options[index] === 'undefined') {\n              return;\n            }\n\n            //Get option\n            option = this.options[index];\n          }\n\n        //Select option now\n        this.select(option, index);\n      };\n    }]\n  });\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('TypeAhead.Component', [])\n\n  /**\n   * Type ahead component\n   */\n  .component('typeAhead', {\n    template: '<div class=\"TypeAhead {{$ctrl.typeAheadClass}}\">\\n      <input class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\\n        placeholder=\"{{$ctrl.placeholder}}\"\\n        ng-keydown=\"$ctrl.keydown($event)\"\\n        ng-keyup=\"$ctrl.keyup($event)\"\\n        ng-disabled=\"$ctrl.isDisabled\"\\n        ng-model=\"$ctrl.searchQuery\">\\n      <spinner class=\"Spinner--input\"></spinner>\\n      <ul class=\"TypeAhead-results\" ng-show=\"$ctrl.isShowingResults\">\\n        <li\\n          ng-repeat=\"item in $ctrl.results\"\\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\\n          ng-mouseover=\"$ctrl.setSelection($index)\"\\n          ng-click=\"$ctrl.confirmSelection($index)\"\\n          ng-transclude>\\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\\n            markmatches:$ctrl.searchQuery:\\'strong\\'\"></span>\\n        </li>\\n      </ul>\\n    </div>',\n    transclude: true,\n    require: {\n      ngModel: 'ngModel'\n    },\n    bindings: {\n      model: '<ngModel',\n      inputClass: '<',\n      options: '<',\n      placeholder: '@',\n      onSearch: '&',\n      onChange: '&',\n      onQuery: '&',\n      isDisabled: '<ngDisabled',\n      labelBy: '@',\n      trackBy: '@',\n      asObject: '@',\n      minLength: '@',\n      allowNew: '@'\n    },\n\n    /**\n     * Component controller\n     */\n    controller: ['$element', '$scope', '$formControls', '$attrs', '$log', '$q', '$timeout', '$document', function controller($element, $scope, $formControls, $attrs, $log, $q, $timeout, $document) {\n\n      //Helper vars\n      var $input = void 0,\n          $container = void 0,\n          $options = void 0;\n      var $ctrl = this;\n      var selectionIndex = -1;\n      var debounce = 100;\n      var labelBy = $attrs.labelBy || null;\n      var trackBy = $attrs.trackBy || null;\n      var asObject = $attrs.asObject === 'true';\n      var allowNew = $attrs.allowNew === 'true';\n\n      //Keep track of searches, prevent older searches overwriting newer ones\n      var currentSearch = 0;\n      var lastProcessedSearch = 0;\n      var pendingSearch = null;\n\n      //Keycodes\n      var KeyCodes = {\n        ENTER: 13,\n        ESC: 27,\n        SPACE: 32,\n        TAB: 9,\n        UP: 38,\n        DOWN: 40\n      };\n\n      /**\n       * Check if input was control\n       */\n      function isControlInput(event) {\n        var keys = [KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB];\n        return keys.indexOf(event.keyCode) > -1;\n      }\n\n      /**\n       * Click handler for document\n       */\n      function documentClickHandler(event) {\n        if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n          $scope.$apply($ctrl.hideResults.bind($ctrl));\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n      /**\n       * Ensure the selected option is in view\n       */\n      function ensureSelectionInView() {\n\n        //Check index\n        if (!$ctrl.isNullable && selectionIndex < 0) {\n          return;\n        }\n\n        //Get option now, taking into account the additional nullable element\n        var option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n        if (!option) {\n          return;\n        }\n\n        //Determine container and element top and bottom\n        var cTop = $container[0].scrollTop;\n        var cBottom = cTop + $container[0].clientHeight;\n        var eTop = option.offsetTop;\n        var eBottom = eTop + option.clientHeight;\n\n        //Check if out of view\n        if (eTop < cTop) {\n          $container[0].scrollTop -= cTop - eTop;\n        } else if (eBottom > cBottom) {\n          $container[0].scrollTop += eBottom - cBottom;\n        }\n      }\n\n      /**\n       * Move selection up\n       */\n      function moveSelectionUp() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = $ctrl.options.length - 1;\n          }\n        } else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n          selectionIndex--;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Move selection down\n       */\n      function moveSelectionDown() {\n        var oldIndex = selectionIndex;\n        if (typeof selectionIndex === 'undefined') {\n          if ($ctrl.isNullable) {\n            selectionIndex = -1;\n          } else if ($ctrl.options.length > 0) {\n            selectionIndex = 0;\n          }\n        } else if (selectionIndex < $ctrl.options.length - 1) {\n          selectionIndex++;\n        }\n        if (oldIndex !== selectionIndex) {\n          ensureSelectionInView();\n        }\n      }\n\n      /**\n       * Helper to get the tracking value of an option\n       */\n      function getTrackingValue(option) {\n\n        //Non object? Track by its value\n        if (option === null || !angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have tracking property\n        if (!trackBy) {\n          $log.warn('Missing track-by property for type ahead');\n          return null;\n        }\n\n        //Validate property\n        if (typeof option[trackBy] === 'undefined') {\n          $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n          return null;\n        }\n\n        //Return the property\n        return option[trackBy];\n      }\n\n      /**\n       * Get the model value\n       */\n      function getModelValue(option) {\n\n        //If returning as object, return the selected option\n        if (asObject) {\n          return option;\n        }\n\n        //Otherwise, return the tracking value of the given option\n        return getTrackingValue(option);\n      }\n\n      /**\n       * Get label value of an option\n       */\n      function getLabelValue(option) {\n\n        //Null value?\n        if (option === null || typeof option === 'undefined') {\n          return '';\n        }\n\n        //Non object? Use its value\n        if (!angular.isObject(option)) {\n          return option;\n        }\n\n        //Must have label property\n        if (!labelBy) {\n          $log.warn('Missing label-by property for type ahead');\n          return '';\n        }\n\n        //Validate property\n        if (typeof option[labelBy] === 'undefined') {\n          $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n          return '';\n        }\n\n        //Return the property\n        return option[labelBy];\n      }\n\n      /**\n       * Find the selected option based on the model value\n       */\n      function findOption(model, options) {\n\n        //Nothing selected or null value selected?\n        if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n          return null;\n        }\n\n        //Tracking by index?\n        if (trackBy === '$index') {\n          if (typeof options[model] !== 'undefined') {\n            return options[model];\n          }\n          return null;\n        }\n\n        //Get the model value\n        var modelValue = getTrackingValue(model, model);\n\n        //Find matching option\n        return options.find(function (option, index) {\n          var optionValue = getTrackingValue(option, index);\n          return modelValue === optionValue;\n        });\n      }\n\n      /**\n       * Do a simple search on object property\n       */\n      function searchOptions(value) {\n        if (!value) {\n          return $q.resolve([]);\n        }\n        var regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n        var items = $ctrl.options.filter(function (option) {\n          var label = getLabelValue(option);\n          return regex.test(label);\n        });\n        return $q.resolve(items);\n      }\n\n      /**\n       * Init\n       */\n      this.$onInit = function () {\n\n        //Find some elements\n        $input = $element.find('input');\n        $container = $input.next().next();\n        $options = $container.find('li');\n\n        //Propagate focus\n        $element.attr('tabindex', -1);\n        $element.on('focus', function () {\n          $input[0].focus();\n        });\n\n        //Propagate classes\n        this.typeAheadClass = $element[0].className;\n        $element[0].className = '';\n\n        //Apply document click handler\n        //NOTE: applied on body, so that it can prevent global $document handlers\n        $document.find('body').on('click', documentClickHandler);\n\n        //Initialize results and flags\n        this.results = [];\n        this.isSearching = false;\n        this.isShowingResults = false;\n\n        //Empty check override in order for ng-required to work properly\n        this.ngModel.$isEmpty = function () {\n          if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n            if (allowNew && $ctrl.searchQuery) {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        };\n      };\n\n      /**\n       * Destroy\n       */\n      this.$onDestroy = function () {\n        $document.find('body').off('click', documentClickHandler);\n      };\n\n      /**\n       * Change handler\n       */\n      this.$onChanges = function (changes) {\n\n        //Validate and mark as dirty if needed\n        if (changes.model) {\n\n          //Only update search query when we have a model\n          //This is to prevent the input from being cleared when we go and edit\n          if (this.model) {\n            var option = void 0;\n            if (angular.isArray(this.options)) {\n              option = findOption(this.model, this.options);\n            } else if (angular.isObject(this.model)) {\n              option = this.model;\n            }\n            if (option) {\n              this.searchQuery = getLabelValue(option);\n            }\n          }\n\n          //Validate model\n          this.ngModel.$validate();\n          if ($formControls.hasChanged(changes.model)) {\n            this.ngModel.$setDirty();\n          }\n        }\n      };\n\n      /**\n       * Get label value of an option\n       */\n      this.getLabel = function (option) {\n        return getLabelValue(option);\n      };\n\n      /**\n       * Key down handler\n       */\n      this.keydown = function (event) {\n\n        //Arrows up/down, move selection\n        if (this.isShowingResults && isControlInput(event)) {\n          if (event.keyCode === KeyCodes.UP) {\n            event.preventDefault();\n            moveSelectionUp();\n          } else if (event.keyCode === KeyCodes.DOWN) {\n            event.preventDefault();\n            moveSelectionDown();\n          } else if (event.keyCode === KeyCodes.ESC) {\n            event.preventDefault();\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.TAB) {\n            //Don't prevent default\n            this.hideResults();\n          } else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.confirmSelection();\n          }\n        }\n\n        //Show options\n        else if (event.keyCode === KeyCodes.ENTER) {\n            event.preventDefault();\n            this.showResults();\n          }\n      };\n\n      /**\n       * Key up handler\n       */\n      this.keyup = function (event) {\n\n        //If control input, skip further handling\n        if (isControlInput(event)) {\n          return;\n        }\n\n        //Get search query\n        var value = (this.searchQuery || '').trim();\n\n        //Call event handlers\n        this.onQuery({ value: value });\n        this.onChange({ value: null, option: null });\n\n        //Validate and mark as dirty\n        this.ngModel.$validate();\n        this.ngModel.$setDirty();\n\n        //Should we search?\n        if (!this.minLength || value.length >= this.minLength) {\n          this.search(value);\n        } else if (this.hasResults()) {\n          this.clearResults();\n          this.clearSelection();\n        }\n      };\n\n      /**************************************************************************\n       * Search\n       ***/\n\n      /**\n       * Search wrapper\n       */\n      this.search = function (value) {\n        var _this = this;\n\n        //Create new debounced search\n        pendingSearch = $timeout(function () {\n          pendingSearch = null;\n          return _this.doSearch(value);\n        }, debounce);\n\n        //Return the promise\n        return pendingSearch;\n      };\n\n      /**\n       * Actual search handler\n       */\n      this.doSearch = function (value) {\n        var _this2 = this;\n\n        //Determine search handler\n        var search = void 0;\n        if (this.options && angular.isArray(this.options)) {\n          search = searchOptions(value);\n        } else if ($attrs.onSearch) {\n          search = this.onSearch({ value: value });\n        } else {\n          $log.warn('No search handler or options specified');\n          return $q.reject();\n        }\n\n        //Toggle flag\n        this.isSearching = true;\n\n        //Return search promise\n        return search\n\n        //Check if we've gotten an old search back\n        .then(function (results) {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(function (results) {\n          _this2.clearSelection();\n          _this2.results = results;\n          if (results && results.length > 0) {\n            _this2.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(function () {\n          return _this2.isSearching = false;\n        });\n      };\n\n      /**************************************************************************\n       * Results navigation & handling\n       ***/\n\n      /**\n       * Check if we have results\n       */\n      this.hasResults = function () {\n        return this.results && this.results.length > 0;\n      };\n\n      /**\n       * Clear results\n       */\n      this.clearResults = function () {\n        this.results = [];\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Show results\n       */\n      this.showResults = function () {\n        if (this.hasResults()) {\n          this.isShowingResults = true;\n        }\n      };\n\n      /**\n       * Select an option\n       */\n      this.select = function (option) {\n\n        //Ignore when disabled\n        if (this.isDisabled) {\n          return;\n        }\n\n        //Hide options\n        this.hideResults();\n\n        //Get the new model and label values\n        var value = getModelValue(option);\n        var label = getLabelValue(option);\n\n        //Set as search query\n        this.searchQuery = label;\n\n        //Call event handlers\n        this.onQuery({ value: label });\n        this.onChange({ value: value, option: option });\n      };\n\n      /**\n       * Hide results\n       */\n      this.hideResults = function () {\n        this.isShowingResults = false;\n      };\n\n      /**\n       * Set the selection index\n       */\n      this.setSelection = function (index) {\n        selectionIndex = index;\n      };\n\n      /**\n       * Check if given index is the selection index\n       */\n      this.isSelection = function (index) {\n        return selectionIndex === index;\n      };\n\n      /**\n       * Clear selection\n       */\n      this.clearSelection = function () {\n        selectionIndex = undefined;\n      };\n\n      /**\n       * Confirm selection\n       */\n      this.confirmSelection = function (index) {\n\n        //If index not given, use current selection index\n        if (typeof index === 'undefined') {\n          index = selectionIndex;\n        }\n\n        //Validate index\n        if (this.results.length === 0 || typeof this.results[index] === 'undefined') {\n          return;\n        }\n\n        //Select result\n        this.select(this.results[index]);\n      };\n    }]\n  });\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBox.Component', [])\n\n/**\n * Checkbox component\n */\n.component('checkBox', {\n  template:\n    `<label class=\"CheckBox\"\n      ng-transclude\n      ng-click=\"$ctrl.toggle($event)\"\n      ng-class=\"{checked: $ctrl.isChecked(), disabled: $ctrl.isDisabled}\"\n    ></label>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  transclude: true,\n  bindings: {\n    model: '<ngModel',\n    onChange: '&',\n    isInverse: '<isInverse',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $formControls) {\n\n    //Get instance\n    let $ctrl = this;\n\n    /**\n     * On init\n     */\n    this.$onInit = function() {\n\n      //Add checkbox wrapper class to parent component\n      $element.addClass('CheckBoxWrapper');\n\n      //Find label\n      const $label = $element.find('label');\n\n      //Propagate focus\n      $element.on('focus', () => {\n        $label[0].focus();\n      });\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isInverse) {\n          return !!$ctrl.model;\n        }\n        return !$ctrl.model;\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Toggle\n     */\n    this.toggle = function(event) {\n\n      //Don't toggle when disabled or event default prevented\n      if (this.isDisabled || event.defaultPrevented) {\n        return;\n      }\n\n      //Get boolean value and call on change handler\n      let value = !this.model;\n      this.onChange({value});\n    };\n\n    /**\n     * Check if checked\n     */\n    this.isChecked = function() {\n      return (this.isInverse ? !this.model : !!this.model);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('CheckBoxes.Component', [])\n\n/**\n * Checkboxes component\n */\n.component('checkBoxes', {\n  template:\n    `<div class=\"CheckBoxGroup {{$ctrl.classes}}\">\n      <label class=\"CheckBox\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.toggle(option, $index)\"\n        ng-class=\"{checked: $ctrl.isChecked(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    min: '<',\n    max: '<',\n    onChange: '&',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for check boxes');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for check box tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for check boxes');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for check box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is checked\n     */\n    function isChecked(model, option, index) {\n\n      //Nothing selected?\n      if (!angular.isArray(model) || model.length === 0) {\n        return false;\n      }\n\n      //Get option value\n      let optionValue = getTrackingValue(option, index);\n\n      //See if present in model values\n      let find = model.find(model => {\n        let modelValue = getTrackingValue(model, model);\n        return (modelValue === optionValue);\n      });\n      return (typeof find !== 'undefined');\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track check boxes by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Validation for min/max values\n      this.ngModel.$validators.min = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.min || $ctrl.min < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length >= $ctrl.min);\n      };\n      this.ngModel.$validators.max = function(modelValue) {\n        if ($ctrl.ngModel.$error.required) {\n          return true;\n        }\n        if (!$ctrl.max || $ctrl.max < 0) {\n          return true;\n        }\n        return (!angular.isArray(modelValue) || modelValue.length <= $ctrl.max);\n      };\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n\n        //Needed here to prevent $validate from setting the model to undefined\n        //NOTE: first approach for Angular < 1.6.0\n        if (typeof $ctrl.ngModel.$$setOptions === 'function') {\n          $ctrl.ngModel.$$setOptions({\n            allowInvalid: true,\n          });\n        }\n        else {\n          $ctrl.ngModel.$options = $ctrl.ngModel.$options.createChild({\n            allowInvalid: true,\n          });\n        }\n\n        //Return check now\n        return (!angular.isArray($ctrl.model) || $ctrl.model.length === 0);\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is checked\n     */\n    this.isChecked = function(option, index) {\n      return isChecked(this.model, option, index);\n    };\n\n    /**\n     * Toggle an option\n     */\n    this.toggle = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Initialize value of our model array\n      let value = [];\n      if (angular.isArray(this.model)) {\n        value = this.model.map(item => item);\n      }\n\n      //Check if currently checked (use source model) and get the item value\n      let checked = isChecked(value, option, index);\n      let optionValue = getTrackingValue(option, index);\n\n      //If checked, remove from target model, otherwise add\n      if (checked) {\n        let i = value.findIndex(model => {\n          let modelValue = getTrackingValue(model, model);\n          return (modelValue === optionValue);\n        });\n        value.splice(i, 1);\n      }\n      else {\n        value.push(asObject ? option : optionValue);\n      }\n\n      //Call on change handler\n      this.onChange({value});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('FormControls.Component', [\n  'CheckBox.Component',\n  'CheckBoxes.Component',\n  'RadioButtons.Component',\n  'SelectBox.Component',\n  'TypeAhead.Component',\n])\n\n/**\n * Helper service\n */\n.factory('$formControls', function() {\n  return {\n\n    /**\n     * Check if an item value really changed (deep checking with angular.equals)\n     */\n    hasChanged(changes) {\n\n      //Get previous and current value\n      let {previousValue, currentValue} = changes;\n\n      //If unitialized, don't trigger changes\n      if (previousValue === 'UNINITIALIZED_VALUE') {\n        return false;\n      }\n\n      //Check if equals\n      return !angular.equals(previousValue, currentValue);\n    },\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('RadioButtons.Component', [])\n\n/**\n * Radio buttons component\n */\n.component('radioButtons', {\n  template:\n    `<div class=\"RadioButtonGroup {{$ctrl.classes}}\">\n      <label class=\"RadioButton\"\n        ng-if=\"$ctrl.isNullable\"\n        ng-click=\"$ctrl.select(null)\"\n        ng-class=\"{checked: $ctrl.isSelected(null), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.nullLabel}}</label>\n      <label class=\"RadioButton\"\n        ng-repeat=\"option in $ctrl.options\"\n        ng-click=\"$ctrl.select(option, $index)\"\n        ng-class=\"{checked: $ctrl.isSelected(option, $index), disabled: $ctrl.isDisabled}\"\n      >{{$ctrl.getLabel(option)}}</label>\n    </div>`,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    isDisabled: '<ngDisabled',\n  },\n\n  /**\n   * Component controller\n   */\n  controller($element, $attrs, $log, $formControls) {\n\n    //Helper vars\n    let $ctrl = this;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for radio buttons');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for radio tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for selectbox');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for selectbox label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Check if a certain option is selected\n     */\n    function isSelected(option, index) {\n\n      //Nullable and null value selected?\n      if (\n        $ctrl.isNullable &&\n        $ctrl.model === $ctrl.nullValue &&\n        option === null) {\n        return true;\n      }\n\n      //Nothing selected?\n      if ($ctrl.model === null) {\n        return false;\n      }\n\n      //Get the model and option values\n      let modelValue = getTrackingValue($ctrl.model, $ctrl.model);\n      let optionValue = getTrackingValue(option, index);\n\n      //Compare the two\n      return (modelValue === optionValue);\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track radio buttons by index if model is an object');\n        asObject = false;\n      }\n\n      //Propagate classes\n      this.classes = $element[0].className;\n      $element[0].className = '';\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = 'None';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Check if given option is selected\n     */\n    this.isSelected = function(option, index) {\n      return isSelected(option, index);\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('SelectBox.Component', [])\n\n/**\n * Selectbox component\n */\n.component('selectBox', {\n  template:\n    `<div class=\"SelectBox {{$ctrl.selectBoxClass}}\">\n      <div class=\"InputWrapper is-clickable\" ng-click=\"$ctrl.toggleOptions()\">\n        <div class=\"Caret\"\n          ng-class=\"{disabled: $ctrl.isDisabled}\"\n          ng-click=\"$event.stopPropagation()\"\n          ng-if=\"!$ctrl.hasSpinner\"\n        ></div>\n        <input readonly class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\n          ng-value=\"$ctrl.getSelectedLabel()\"\n          ng-keydown=\"$ctrl.keydown($event)\"\n          ng-class=\"{disabled: ($ctrl.isDisabled || $ctrl.hasSpinner)}\">\n        <spinner class=\"Spinner--input\" ng-if=\"$ctrl.hasSpinner\"></spinner>\n      </div>\n      <ul class=\"SelectBox-options\" ng-show=\"$ctrl.isShowingOptions\">\n        <li\n          ng-if=\"$ctrl.isNullable || !$ctrl.hasOptions()\"\n          ng-class=\"{selected: $ctrl.isSelection(-1)}\"\n          ng-mouseover=\"$ctrl.setSelection(-1)\"\n          ng-click=\"$ctrl.confirmSelection(-1); $event.preventDefault();\"\n        >{{$ctrl.nullLabel}}</li>\n        <li\n          ng-transclude\n          ng-repeat=\"option in $ctrl.options\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index); $event.preventDefault();\"\n        >{{$ctrl.getLabel(option)}}</li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    options: '<',\n    onChange: '&',\n    isNullable: '<',\n    nullValue: '<',\n    nullLabel: '<',\n    inputClass: '<',\n    isDisabled: '<ngDisabled',\n    hasSpinner: '<hasSpinner',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $attrs, $log, $formControls, $scope, $document, $timeout, $window\n  ) {\n\n    //Helper vars\n    const $ctrl = this;\n    let selectionIndex, $input, $container;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let phrase = '';\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Debounce helper\n     */\n    function debounce(func, delay) {\n\n      //Timeout placeholder\n      let timeout;\n\n      //Create wrapper function\n      const wrapper = function() {\n\n        //Clear any existing timeout\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        //Create new timeout\n        timeout = setTimeout(() => func(), delay);\n      };\n\n      //Return wrapper function\n      return wrapper;\n    }\n\n    /**\n     * Function to clear the phrase (debounced after 1.5 seconds)\n     */\n    const clearPhrase = debounce(() => {\n      phrase = '';\n    }, 1000);\n\n    /**\n     * Check if input was text\n     */\n    function isTextInput(event) {\n      if (event.keyCode >= 48 && event.keyCode <= 57) {\n        return true;\n      }\n      if (event.keyCode >= 65 && event.keyCode <= 90) {\n        return true;\n      }\n      if (event.keyCode === 32) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if ($ctrl.isShowingOptions && !$element[0].contains(event.target)) {\n        $scope.$apply($ctrl.hideOptions.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Find scrollable parent\n     */\n    function findScrollableParent($child) {\n\n      //Get parent\n      const $parent = $child.parent();\n      if ($parent.length === 0) {\n        return null;\n      }\n\n      //Get style\n      const style = $window.getComputedStyle($parent[0]);\n\n      //Find element that has auto overflow or which is the body\n      if ($parent[0].tagName === 'BODY' || style.overflowY === 'auto') {\n        return $parent;\n      }\n\n      //Find next\n      return findScrollableParent($parent);\n    }\n\n    /**\n     * Find offset relative to a certain node\n     */\n    function findOffset(node, relativeNode) {\n      let offset = node.offsetTop;\n      while (node.offsetParent && node.offsetParent !== relativeNode) {\n        node = node.offsetParent;\n        offset += node.offsetTop;\n      }\n      return offset;\n    }\n\n    /**\n     * Ensure the whole dropdown is in view\n     */\n    function ensureDropdownInView() {\n\n      //Find scrollable parent\n      const $parent = findScrollableParent($element);\n      if (!$parent) {\n        return;\n      }\n\n      //Get params\n      const offset = findOffset($container[0], $parent[0]);\n      const height = $parent[0].clientHeight;\n      const scroll = $parent[0].scrollTop;\n      const bottom = offset - scroll + $container[0].clientHeight;\n\n      //Check if it's outside of the height\n      if (bottom > height) {\n        const diff = bottom - height + 16;\n        $parent[0].scrollTop += diff;\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Find options\n      const $options = $container.children();\n\n      //Get option now, taking into account the additional nullable element\n      const option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      const cTop = $container[0].scrollTop;\n      const cBottom = cTop + $container[0].clientHeight;\n      const eTop = option.offsetTop;\n      const eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option, index) {\n\n      //Null value?\n      if (option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        return index;\n      }\n\n      //Non object? Track by its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for select box');\n        return $ctrl.nullValue;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for select box tracking');\n        return $ctrl.nullValue;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option, index) {\n\n      //If nullable and null option given, return null value\n      if ($ctrl.isNullable && option === null) {\n        return $ctrl.nullValue;\n      }\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option, index);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return $ctrl.nullLabel;\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for select box');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for select box label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Initialization\n     */\n    this.$onInit = function() {\n\n      //Check configuration\n      if (asObject && trackBy === '$index') {\n        $log.warn('Cannot track select box by index if model is an object');\n        asObject = false;\n      }\n\n      //Initialize flags\n      this.isShowingOptions = false;\n\n      //Propagate classes\n      this.selectBoxClass = $element[0].className;\n      $element[0].className = '';\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.parent().next();\n\n      //Apply global click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.isNullable) {\n          return ($ctrl.model === $ctrl.nullValue);\n        }\n        return ($ctrl.model === null || typeof $ctrl.model === 'undefined');\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * On change\n     */\n    this.$onChanges = function(changes) {\n\n      //Must have array as options\n      if (!angular.isArray(this.options)) {\n        this.options = [];\n      }\n\n      //Set default null value/label if not set\n      if (typeof this.nullValue === 'undefined') {\n        this.nullValue = null;\n      }\n      if (typeof this.nullLabel === 'undefined') {\n        this.nullLabel = '...';\n      }\n\n      //Set model to null value if not defined or null\n      if (this.isNullable) {\n        if (this.model === null || typeof this.model === 'undefined') {\n          this.model = this.nullValue;\n        }\n      }\n\n      //If disabled, hide options\n      if (this.isDisabled) {\n        this.isShowingOptions = false;\n      }\n\n      //Determine selection index\n      let option = findOption(this.model, this.options);\n      selectionIndex = this.options.indexOf(option);\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Keydown handler for input element\n     */\n    this.keydown = function(event) {\n\n      //Move selection up or down\n      if (event.keyCode === KeyCodes.UP) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionUp();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n      else if (event.keyCode === KeyCodes.DOWN) {\n        event.preventDefault();\n        if (this.isShowingOptions) {\n          moveSelectionDown();\n        }\n        else {\n          this.showOptions();\n        }\n      }\n\n      //Confirm selection\n      else if (event.keyCode === KeyCodes.ENTER && this.isShowingOptions) {\n        event.preventDefault();\n        this.confirmSelection();\n      }\n\n      //Hide options\n      else if (event.keyCode === KeyCodes.ESC && this.isShowingOptions) {\n        event.preventDefault();\n        this.hideOptions();\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER && !this.isShowingOptions) {\n        event.preventDefault();\n        this.showOptions();\n      }\n\n      //Text input\n      else if (isTextInput(event)) {\n        const char = String.fromCharCode(event.keyCode);\n        this.selectByInput(char);\n      }\n    };\n\n    /**\n     * Get label value of selected option\n     */\n    this.getSelectedLabel = function() {\n      let option = findOption(this.model, this.options);\n      return getLabelValue(option);\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Show options\n     */\n    this.showOptions = function() {\n      if (!this.isDisabled && !this.hasSpinner) {\n        this.isShowingOptions = true;\n        $timeout(() => {\n          ensureDropdownInView();\n        });\n      }\n    };\n\n    /**\n     * Hide options\n     */\n    this.hideOptions = function() {\n      this.isShowingOptions = false;\n    };\n\n    /**\n     * Toggle options\n     */\n    this.toggleOptions = function() {\n      if (this.isShowingOptions) {\n        this.hideOptions();\n      }\n      else {\n        this.showOptions();\n      }\n    };\n\n    /**\n     * Has options check\n     */\n    this.hasOptions = function() {\n      return (this.options.length > 0);\n    };\n\n    /**\n     * Select by input character(s)\n     */\n    this.selectByInput = function(char) {\n\n      //Lowercase all the things\n      char = char.toLowerCase();\n\n      //Add to phrase\n      phrase += char;\n\n      //Create regex\n      const regex = new RegExp('^' + phrase, 'i');\n\n      //Find matching option\n      const option = this.options.find(option => {\n        const label = getLabelValue(option);\n        return label.match(regex);\n      });\n\n      //Match found?\n      if (option) {\n        const index = this.options.findIndex(o => o === option);\n        this.select(option, index, true);\n      }\n\n      //Clear phrase (debounced)\n      clearPhrase();\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option, index, leaveOpen) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      if (!leaveOpen) {\n        this.hideOptions();\n      }\n      else {\n        ensureSelectionInView();\n      }\n\n      //Get the new model value and call on change handler\n      let value = getModelValue(option, index);\n      this.onChange({value, option});\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Initialize option\n      let option;\n\n      //Nullable and -1 index given?\n      if (this.isNullable && index === -1) {\n        option = null;\n      }\n\n      //Otherwise, take from given options\n      else {\n\n        //Validate index\n        if (\n          !this.hasOptions() ||\n          typeof index === 'undefined' ||\n          typeof this.options[index] === 'undefined'\n        ) {\n          return;\n        }\n\n        //Get option\n        option = this.options[index];\n      }\n\n      //Select option now\n      this.select(option, index);\n    };\n  },\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n/**\n * Module definition and dependencies\n */\nangular.module('TypeAhead.Component', [])\n\n/**\n * Type ahead component\n */\n.component('typeAhead', {\n  template:\n    `<div class=\"TypeAhead {{$ctrl.typeAheadClass}}\">\n      <input class=\"Input {{$ctrl.inputClass}}\" type=\"text\"\n        placeholder=\"{{$ctrl.placeholder}}\"\n        ng-keydown=\"$ctrl.keydown($event)\"\n        ng-keyup=\"$ctrl.keyup($event)\"\n        ng-disabled=\"$ctrl.isDisabled\"\n        ng-model=\"$ctrl.searchQuery\">\n      <spinner class=\"Spinner--input\"></spinner>\n      <ul class=\"TypeAhead-results\" ng-show=\"$ctrl.isShowingResults\">\n        <li\n          ng-repeat=\"item in $ctrl.results\"\n          ng-class=\"{selected: $ctrl.isSelection($index)}\"\n          ng-mouseover=\"$ctrl.setSelection($index)\"\n          ng-click=\"$ctrl.confirmSelection($index)\"\n          ng-transclude>\n          <span ng-bind-html=\"$ctrl.getLabel(item) |\n            markmatches:$ctrl.searchQuery:'strong'\"></span>\n        </li>\n      </ul>\n    </div>`,\n  transclude: true,\n  require: {\n    ngModel: 'ngModel',\n  },\n  bindings: {\n    model: '<ngModel',\n    inputClass: '<',\n    options: '<',\n    placeholder: '@',\n    onSearch: '&',\n    onChange: '&',\n    onQuery: '&',\n    isDisabled: '<ngDisabled',\n    labelBy: '@',\n    trackBy: '@',\n    asObject: '@',\n    minLength: '@',\n    allowNew: '@',\n  },\n\n  /**\n   * Component controller\n   */\n  controller(\n    $element, $scope, $formControls, $attrs, $log, $q, $timeout, $document\n  ) {\n\n    //Helper vars\n    let $input, $container, $options;\n    let $ctrl = this;\n    let selectionIndex = -1;\n    let debounce = 100;\n    let labelBy = $attrs.labelBy || null;\n    let trackBy = $attrs.trackBy || null;\n    let asObject = ($attrs.asObject === 'true');\n    let allowNew = ($attrs.allowNew === 'true');\n\n    //Keep track of searches, prevent older searches overwriting newer ones\n    let currentSearch = 0;\n    let lastProcessedSearch = 0;\n    let pendingSearch = null;\n\n    //Keycodes\n    const KeyCodes = {\n      ENTER: 13,\n      ESC: 27,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      DOWN: 40,\n    };\n\n    /**\n     * Check if input was control\n     */\n    function isControlInput(event) {\n      let keys = [\n        KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.ESC, KeyCodes.TAB,\n      ];\n      return (keys.indexOf(event.keyCode) > -1);\n    }\n\n    /**\n     * Click handler for document\n     */\n    function documentClickHandler(event) {\n      if (!$input[0].contains(event.target) && $ctrl.isShowingResults) {\n        $scope.$apply($ctrl.hideResults.bind($ctrl));\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n\n    /**\n     * Ensure the selected option is in view\n     */\n    function ensureSelectionInView() {\n\n      //Check index\n      if (!$ctrl.isNullable && selectionIndex < 0) {\n        return;\n      }\n\n      //Get option now, taking into account the additional nullable element\n      let option = $options[selectionIndex + ($ctrl.isNullable ? 1 : 0)];\n      if (!option) {\n        return;\n      }\n\n      //Determine container and element top and bottom\n      let cTop = $container[0].scrollTop;\n      let cBottom = cTop + $container[0].clientHeight;\n      let eTop = option.offsetTop;\n      let eBottom = eTop + option.clientHeight;\n\n      //Check if out of view\n      if (eTop < cTop) {\n        $container[0].scrollTop -= (cTop - eTop);\n      }\n      else if (eBottom > cBottom) {\n        $container[0].scrollTop += (eBottom - cBottom);\n      }\n    }\n\n    /**\n     * Move selection up\n     */\n    function moveSelectionUp() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = $ctrl.options.length - 1;\n        }\n      }\n      else if (selectionIndex > ($ctrl.isNullable ? -1 : 0)) {\n        selectionIndex--;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Move selection down\n     */\n    function moveSelectionDown() {\n      let oldIndex = selectionIndex;\n      if (typeof selectionIndex === 'undefined') {\n        if ($ctrl.isNullable) {\n          selectionIndex = -1;\n        }\n        else if ($ctrl.options.length > 0) {\n          selectionIndex = 0;\n        }\n      }\n      else if (selectionIndex < ($ctrl.options.length - 1)) {\n        selectionIndex++;\n      }\n      if (oldIndex !== selectionIndex) {\n        ensureSelectionInView();\n      }\n    }\n\n    /**\n     * Helper to get the tracking value of an option\n     */\n    function getTrackingValue(option) {\n\n      //Non object? Track by its value\n      if (option === null || !angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have tracking property\n      if (!trackBy) {\n        $log.warn('Missing track-by property for type ahead');\n        return null;\n      }\n\n      //Validate property\n      if (typeof option[trackBy] === 'undefined') {\n        $log.warn('Unknown property `' + trackBy + '` for type ahead tracking');\n        return null;\n      }\n\n      //Return the property\n      return option[trackBy];\n    }\n\n    /**\n     * Get the model value\n     */\n    function getModelValue(option) {\n\n      //If returning as object, return the selected option\n      if (asObject) {\n        return option;\n      }\n\n      //Otherwise, return the tracking value of the given option\n      return getTrackingValue(option);\n    }\n\n    /**\n     * Get label value of an option\n     */\n    function getLabelValue(option) {\n\n      //Null value?\n      if (option === null || typeof option === 'undefined') {\n        return '';\n      }\n\n      //Non object? Use its value\n      if (!angular.isObject(option)) {\n        return option;\n      }\n\n      //Must have label property\n      if (!labelBy) {\n        $log.warn('Missing label-by property for type ahead');\n        return '';\n      }\n\n      //Validate property\n      if (typeof option[labelBy] === 'undefined') {\n        $log.warn('Unknown property `' + labelBy + '` for type ahead label');\n        return '';\n      }\n\n      //Return the property\n      return option[labelBy];\n    }\n\n    /**\n     * Find the selected option based on the model value\n     */\n    function findOption(model, options) {\n\n      //Nothing selected or null value selected?\n      if (typeof model === 'undefined' || model === $ctrl.nullValue) {\n        return null;\n      }\n\n      //Tracking by index?\n      if (trackBy === '$index') {\n        if (typeof options[model] !== 'undefined') {\n          return options[model];\n        }\n        return null;\n      }\n\n      //Get the model value\n      let modelValue = getTrackingValue(model, model);\n\n      //Find matching option\n      return options\n        .find((option, index) => {\n          let optionValue = getTrackingValue(option, index);\n          return (modelValue === optionValue);\n        });\n    }\n\n    /**\n     * Do a simple search on object property\n     */\n    function searchOptions(value) {\n      if (!value) {\n        return $q.resolve([]);\n      }\n      let regex = new RegExp('(?:^|\\\\b)(' + value + ')', 'i');\n      let items = $ctrl.options\n        .filter(option => {\n          let label = getLabelValue(option);\n          return regex.test(label);\n        });\n      return $q.resolve(items);\n    }\n\n    /**\n     * Init\n     */\n    this.$onInit = function() {\n\n      //Find some elements\n      $input = $element.find('input');\n      $container = $input.next().next();\n      $options = $container.find('li');\n\n      //Propagate focus\n      $element.attr('tabindex', -1);\n      $element.on('focus', () => {\n        $input[0].focus();\n      });\n\n      //Propagate classes\n      this.typeAheadClass = $element[0].className;\n      $element[0].className = '';\n\n      //Apply document click handler\n      //NOTE: applied on body, so that it can prevent global $document handlers\n      $document.find('body').on('click', documentClickHandler);\n\n      //Initialize results and flags\n      this.results = [];\n      this.isSearching = false;\n      this.isShowingResults = false;\n\n      //Empty check override in order for ng-required to work properly\n      this.ngModel.$isEmpty = function() {\n        if ($ctrl.model === null || typeof $ctrl.model === 'undefined') {\n          if (allowNew && $ctrl.searchQuery) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    /**\n     * Destroy\n     */\n    this.$onDestroy = function() {\n      $document.find('body').off('click', documentClickHandler);\n    };\n\n    /**\n     * Change handler\n     */\n    this.$onChanges = function(changes) {\n\n      //Validate and mark as dirty if needed\n      if (changes.model) {\n\n        //Only update search query when we have a model\n        //This is to prevent the input from being cleared when we go and edit\n        if (this.model) {\n          let option;\n          if (angular.isArray(this.options)) {\n            option = findOption(this.model, this.options);\n          }\n          else if (angular.isObject(this.model)) {\n            option = this.model;\n          }\n          if (option) {\n            this.searchQuery = getLabelValue(option);\n          }\n        }\n\n        //Validate model\n        this.ngModel.$validate();\n        if ($formControls.hasChanged(changes.model)) {\n          this.ngModel.$setDirty();\n        }\n      }\n    };\n\n    /**\n     * Get label value of an option\n     */\n    this.getLabel = function(option) {\n      return getLabelValue(option);\n    };\n\n    /**\n     * Key down handler\n     */\n    this.keydown = function(event) {\n\n      //Arrows up/down, move selection\n      if (this.isShowingResults && isControlInput(event)) {\n        if (event.keyCode === KeyCodes.UP) {\n          event.preventDefault();\n          moveSelectionUp();\n        }\n        else if (event.keyCode === KeyCodes.DOWN) {\n          event.preventDefault();\n          moveSelectionDown();\n        }\n        else if (event.keyCode === KeyCodes.ESC) {\n          event.preventDefault();\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.TAB) {\n          //Don't prevent default\n          this.hideResults();\n        }\n        else if (event.keyCode === KeyCodes.ENTER) {\n          event.preventDefault();\n          this.confirmSelection();\n        }\n      }\n\n      //Show options\n      else if (event.keyCode === KeyCodes.ENTER) {\n        event.preventDefault();\n        this.showResults();\n      }\n    };\n\n    /**\n     * Key up handler\n     */\n    this.keyup = function(event) {\n\n      //If control input, skip further handling\n      if (isControlInput(event)) {\n        return;\n      }\n\n      //Get search query\n      let value = (this.searchQuery || '').trim();\n\n      //Call event handlers\n      this.onQuery({value});\n      this.onChange({value: null, option: null});\n\n      //Validate and mark as dirty\n      this.ngModel.$validate();\n      this.ngModel.$setDirty();\n\n      //Should we search?\n      if (!this.minLength || value.length >= this.minLength) {\n        this.search(value);\n      }\n      else if (this.hasResults()) {\n        this.clearResults();\n        this.clearSelection();\n      }\n    };\n\n    /**************************************************************************\n     * Search\n     ***/\n\n    /**\n     * Search wrapper\n     */\n    this.search = function(value) {\n\n      //Create new debounced search\n      pendingSearch = $timeout(() => {\n        pendingSearch = null;\n        return this.doSearch(value);\n      }, debounce);\n\n      //Return the promise\n      return pendingSearch;\n    };\n\n    /**\n     * Actual search handler\n     */\n    this.doSearch = function(value) {\n\n      //Determine search handler\n      let search;\n      if (this.options && angular.isArray(this.options)) {\n        search = searchOptions(value);\n      }\n      else if ($attrs.onSearch) {\n        search = this.onSearch({value});\n      }\n      else {\n        $log.warn('No search handler or options specified');\n        return $q.reject();\n      }\n\n      //Toggle flag\n      this.isSearching = true;\n\n      //Return search promise\n      return search\n\n        //Check if we've gotten an old search back\n        .then(results => {\n          if (++currentSearch > lastProcessedSearch) {\n            return results;\n          }\n          return $q.reject('old search');\n        })\n\n        //Process the results\n        .then(results => {\n          this.clearSelection();\n          this.results = results;\n          if (results && results.length > 0) {\n            this.isShowingResults = true;\n          }\n        })\n\n        //Done searching\n        .finally(() => this.isSearching = false);\n    };\n\n    /**************************************************************************\n     * Results navigation & handling\n     ***/\n\n    /**\n     * Check if we have results\n     */\n    this.hasResults = function() {\n      return (this.results && this.results.length > 0);\n    };\n\n    /**\n     * Clear results\n     */\n    this.clearResults = function() {\n      this.results = [];\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Show results\n     */\n    this.showResults = function() {\n      if (this.hasResults()) {\n        this.isShowingResults = true;\n      }\n    };\n\n    /**\n     * Select an option\n     */\n    this.select = function(option) {\n\n      //Ignore when disabled\n      if (this.isDisabled) {\n        return;\n      }\n\n      //Hide options\n      this.hideResults();\n\n      //Get the new model and label values\n      let value = getModelValue(option);\n      let label = getLabelValue(option);\n\n      //Set as search query\n      this.searchQuery = label;\n\n      //Call event handlers\n      this.onQuery({value: label});\n      this.onChange({value, option});\n    };\n\n    /**\n     * Hide results\n     */\n    this.hideResults = function() {\n      this.isShowingResults = false;\n    };\n\n    /**\n     * Set the selection index\n     */\n    this.setSelection = function(index) {\n      selectionIndex = index;\n    };\n\n    /**\n     * Check if given index is the selection index\n     */\n    this.isSelection = function(index) {\n      return (selectionIndex === index);\n    };\n\n    /**\n     * Clear selection\n     */\n    this.clearSelection = function() {\n      selectionIndex = undefined;\n    };\n\n    /**\n     * Confirm selection\n     */\n    this.confirmSelection = function(index) {\n\n      //If index not given, use current selection index\n      if (typeof index === 'undefined') {\n        index = selectionIndex;\n      }\n\n      //Validate index\n      if (\n        this.results.length === 0 ||\n        typeof this.results[index] === 'undefined') {\n        return;\n      }\n\n      //Select result\n      this.select(this.results[index]);\n    };\n  },\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}